
telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bdc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001dc0  08001dc0  00011dc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001df4  08001df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001df8  08001df8  00011df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001dc  20000004  08001e00  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001e0  08001e00  000201e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eaff  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f5a  00000000  00000000  0002eb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000297a  00000000  00000000  00030a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000540  00000000  00000000  00033400  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a0  00000000  00000000  00033940  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c4a  00000000  00000000  000341e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000026e0  00000000  00000000  00037e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a50a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000cbc  00000000  00000000  0003a588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	08001da8 	.word	0x08001da8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	08001da8 	.word	0x08001da8

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b510      	push	{r4, lr}
 8000226:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000228:	f000 fff4 	bl	8001214 <HAL_RCC_GetHCLKFreq>
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb0 f0f3 	udiv	r0, r0, r3
 8000234:	f000 fab6 	bl	80007a4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000238:	2200      	movs	r2, #0
 800023a:	4621      	mov	r1, r4
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f000 fa70 	bl	8000724 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000244:	2000      	movs	r0, #0
 8000246:	bd10      	pop	{r4, pc}

08000248 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	4a07      	ldr	r2, [pc, #28]	; (8000268 <HAL_Init+0x20>)
{
 800024a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800024e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000256:	f000 fa53 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800025a:	2000      	movs	r0, #0
 800025c:	f7ff ffe2 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000260:	f001 fc6e 	bl	8001b40 <HAL_MspInit>
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd08      	pop	{r3, pc}
 8000268:	40022000 	.word	0x40022000

0800026c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800026c:	4a02      	ldr	r2, [pc, #8]	; (8000278 <HAL_IncTick+0xc>)
 800026e:	6813      	ldr	r3, [r2, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	6013      	str	r3, [r2, #0]
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000020 	.word	0x20000020

0800027c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800027c:	4b01      	ldr	r3, [pc, #4]	; (8000284 <HAL_GetTick+0x8>)
 800027e:	6818      	ldr	r0, [r3, #0]
}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000020 	.word	0x20000020

08000288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000288:	b513      	push	{r0, r1, r4, lr}
 800028a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800028c:	f7ff fff6 	bl	800027c <HAL_GetTick>
 8000290:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000292:	f7ff fff3 	bl	800027c <HAL_GetTick>
 8000296:	9b01      	ldr	r3, [sp, #4]
 8000298:	1b00      	subs	r0, r0, r4
 800029a:	4298      	cmp	r0, r3
 800029c:	d3f9      	bcc.n	8000292 <HAL_Delay+0xa>
  {
  }
}
 800029e:	b002      	add	sp, #8
 80002a0:	bd10      	pop	{r4, pc}

080002a2 <HAL_CAN_ConfigFilter>:
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80002a2:	2201      	movs	r2, #1

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002a4:	6803      	ldr	r3, [r0, #0]
{
 80002a6:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002a8:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 80002ac:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80002ae:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002b0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80002b4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80002b8:	f040 0001 	orr.w	r0, r0, #1
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80002bc:	40a2      	lsls	r2, r4
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002be:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8)   );
  
  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80002c2:	43d0      	mvns	r0, r2
 80002c4:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 80002c8:	4005      	ands	r5, r0
 80002ca:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
  
  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80002ce:	69cd      	ldr	r5, [r1, #28]
 80002d0:	bb85      	cbnz	r5, 8000334 <HAL_CAN_ConfigFilter+0x92>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80002d2:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 80002d6:	68ce      	ldr	r6, [r1, #12]
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80002d8:	4005      	ands	r5, r0
 80002da:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 80002de:	888d      	ldrh	r5, [r1, #4]
 80002e0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 80002e4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80002e8:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80002ec:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
 80002ee:	880d      	ldrh	r5, [r1, #0]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80002f0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80002f4:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80002f8:	698c      	ldr	r4, [r1, #24]
 80002fa:	bb6c      	cbnz	r4, 8000358 <HAL_CAN_ConfigFilter+0xb6>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80002fc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8000300:	4004      	ands	r4, r0
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000302:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000306:	690c      	ldr	r4, [r1, #16]
 8000308:	bb54      	cbnz	r4, 8000360 <HAL_CAN_ConfigFilter+0xbe>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800030a:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 800030e:	4020      	ands	r0, r4
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000310:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000314:	6a09      	ldr	r1, [r1, #32]
  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
  
  /* Return function status */
  return HAL_OK;
}
 8000316:	2000      	movs	r0, #0
  if (sFilterConfig->FilterActivation == ENABLE)
 8000318:	2901      	cmp	r1, #1
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800031a:	bf02      	ittt	eq
 800031c:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8000320:	430a      	orreq	r2, r1
 8000322:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8000326:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800032a:	f022 0201 	bic.w	r2, r2, #1
 800032e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8000332:	bd70      	pop	{r4, r5, r6, pc}
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000334:	2d01      	cmp	r5, #1
 8000336:	d1df      	bne.n	80002f8 <HAL_CAN_ConfigFilter+0x56>
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000338:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800033c:	680e      	ldr	r6, [r1, #0]
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800033e:	4315      	orrs	r5, r2
 8000340:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 8000344:	888d      	ldrh	r5, [r1, #4]
 8000346:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 800034a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800034e:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8000352:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000354:	898d      	ldrh	r5, [r1, #12]
 8000356:	e7cb      	b.n	80002f0 <HAL_CAN_ConfigFilter+0x4e>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000358:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800035c:	4314      	orrs	r4, r2
 800035e:	e7d0      	b.n	8000302 <HAL_CAN_ConfigFilter+0x60>
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000360:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000364:	4310      	orrs	r0, r2
 8000366:	e7d3      	b.n	8000310 <HAL_CAN_ConfigFilter+0x6e>

08000368 <HAL_CAN_Init>:
{
 8000368:	b570      	push	{r4, r5, r6, lr}
  if(hcan == NULL)
 800036a:	4604      	mov	r4, r0
 800036c:	2800      	cmp	r0, #0
 800036e:	d05f      	beq.n	8000430 <HAL_CAN_Init+0xc8>
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000370:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000374:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000378:	b91b      	cbnz	r3, 8000382 <HAL_CAN_Init+0x1a>
    hcan->Lock = HAL_UNLOCKED;
 800037a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_CAN_MspInit(hcan);
 800037e:	f001 fc25 	bl	8001bcc <HAL_CAN_MspInit>
  hcan->State = HAL_CAN_STATE_BUSY;
 8000382:	2302      	movs	r3, #2
 8000384:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000388:	6823      	ldr	r3, [r4, #0]
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	f022 0202 	bic.w	r2, r2, #2
 8000390:	601a      	str	r2, [r3, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	f042 0201 	orr.w	r2, r2, #1
 8000398:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();   
 800039a:	f7ff ff6f 	bl	800027c <HAL_GetTick>
 800039e:	4606      	mov	r6, r0
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80003a0:	6822      	ldr	r2, [r4, #0]
 80003a2:	6855      	ldr	r5, [r2, #4]
 80003a4:	f015 0501 	ands.w	r5, r5, #1
 80003a8:	d044      	beq.n	8000434 <HAL_CAN_Init+0xcc>
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80003aa:	6853      	ldr	r3, [r2, #4]
 80003ac:	07d9      	lsls	r1, r3, #31
 80003ae:	d53c      	bpl.n	800042a <HAL_CAN_Init+0xc2>
    if (hcan->Init.TTCM == ENABLE)
 80003b0:	69a3      	ldr	r3, [r4, #24]
    if (hcan->Init.ABOM == ENABLE)
 80003b2:	69e1      	ldr	r1, [r4, #28]
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	bf0c      	ite	eq
 80003b8:	2380      	moveq	r3, #128	; 0x80
 80003ba:	2300      	movne	r3, #0
    if (hcan->Init.ABOM == ENABLE)
 80003bc:	2901      	cmp	r1, #1
    if (hcan->Init.AWUM == ENABLE)
 80003be:	6a21      	ldr	r1, [r4, #32]
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 80003c0:	bf08      	it	eq
 80003c2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 80003c6:	2901      	cmp	r1, #1
    if (hcan->Init.NART == ENABLE)
 80003c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 80003ca:	bf08      	it	eq
 80003cc:	f043 0320 	orreq.w	r3, r3, #32
    if (hcan->Init.NART == ENABLE)
 80003d0:	2901      	cmp	r1, #1
    if (hcan->Init.RFLM == ENABLE)
 80003d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 80003d4:	bf08      	it	eq
 80003d6:	f043 0310 	orreq.w	r3, r3, #16
    if (hcan->Init.RFLM == ENABLE)
 80003da:	2901      	cmp	r1, #1
    if (hcan->Init.TXFP == ENABLE)
 80003dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 80003de:	bf08      	it	eq
 80003e0:	f043 0308 	orreq.w	r3, r3, #8
    if (hcan->Init.TXFP == ENABLE)
 80003e4:	2901      	cmp	r1, #1
    MODIFY_REG(hcan->Instance->MCR,
 80003e6:	6811      	ldr	r1, [r2, #0]
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 80003e8:	bf08      	it	eq
 80003ea:	f043 0304 	orreq.w	r3, r3, #4
    MODIFY_REG(hcan->Instance->MCR,
 80003ee:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 80003f2:	430b      	orrs	r3, r1
 80003f4:	6013      	str	r3, [r2, #0]
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80003f6:	68e1      	ldr	r1, [r4, #12]
 80003f8:	68a3      	ldr	r3, [r4, #8]
 80003fa:	430b      	orrs	r3, r1
 80003fc:	6921      	ldr	r1, [r4, #16]
 80003fe:	430b      	orrs	r3, r1
 8000400:	6961      	ldr	r1, [r4, #20]
 8000402:	430b      	orrs	r3, r1
 8000404:	6861      	ldr	r1, [r4, #4]
 8000406:	3901      	subs	r1, #1
 8000408:	430b      	orrs	r3, r1
 800040a:	61d3      	str	r3, [r2, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800040c:	6813      	ldr	r3, [r2, #0]
 800040e:	f023 0301 	bic.w	r3, r3, #1
 8000412:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();   
 8000414:	f7ff ff32 	bl	800027c <HAL_GetTick>
 8000418:	4606      	mov	r6, r0
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800041a:	6822      	ldr	r2, [r4, #0]
 800041c:	6855      	ldr	r5, [r2, #4]
 800041e:	f015 0501 	ands.w	r5, r5, #1
 8000422:	d012      	beq.n	800044a <HAL_CAN_Init+0xe2>
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000424:	6853      	ldr	r3, [r2, #4]
 8000426:	07db      	lsls	r3, r3, #31
 8000428:	d415      	bmi.n	8000456 <HAL_CAN_Init+0xee>
    hcan->State = HAL_CAN_STATE_ERROR;
 800042a:	2304      	movs	r3, #4
 800042c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_ERROR;
 8000430:	2001      	movs	r0, #1
}
 8000432:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000434:	f7ff ff22 	bl	800027c <HAL_GetTick>
 8000438:	1b80      	subs	r0, r0, r6
 800043a:	280a      	cmp	r0, #10
 800043c:	d9b0      	bls.n	80003a0 <HAL_CAN_Init+0x38>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 800043e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 8000440:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000444:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
        return HAL_TIMEOUT;
 8000448:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800044a:	f7ff ff17 	bl	800027c <HAL_GetTick>
 800044e:	1b80      	subs	r0, r0, r6
 8000450:	280a      	cmp	r0, #10
 8000452:	d9e2      	bls.n	800041a <HAL_CAN_Init+0xb2>
 8000454:	e7f3      	b.n	800043e <HAL_CAN_Init+0xd6>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000456:	2000      	movs	r0, #0
    hcan->State = HAL_CAN_STATE_READY;
 8000458:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800045a:	63e0      	str	r0, [r4, #60]	; 0x3c
    hcan->State = HAL_CAN_STATE_READY;
 800045c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000460:	bd70      	pop	{r4, r5, r6, pc}

08000462 <HAL_CAN_Receive_IT>:
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 8000462:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000466:	b510      	push	{r4, lr}
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 8000468:	2b01      	cmp	r3, #1
 800046a:	d003      	beq.n	8000474 <HAL_CAN_Receive_IT+0x12>
 800046c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000470:	2b12      	cmp	r3, #18
 8000472:	d126      	bne.n	80004c2 <HAL_CAN_Receive_IT+0x60>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8000474:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000478:	2b01      	cmp	r3, #1
 800047a:	d022      	beq.n	80004c2 <HAL_CAN_Receive_IT+0x60>
 800047c:	2301      	movs	r3, #1
 800047e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 8000482:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000486:	6802      	ldr	r2, [r0, #0]
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 8000488:	2b12      	cmp	r3, #18
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 800048a:	bf0c      	ite	eq
 800048c:	2332      	moveq	r3, #50	; 0x32
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 800048e:	2322      	movne	r3, #34	; 0x22
 8000490:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000494:	2300      	movs	r3, #0
 8000496:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000498:	6954      	ldr	r4, [r2, #20]
 800049a:	f444 440f 	orr.w	r4, r4, #36608	; 0x8f00
 800049e:	f044 0401 	orr.w	r4, r4, #1
 80004a2:	6154      	str	r4, [r2, #20]
                              CAN_IT_LEC |
                              CAN_IT_ERR |
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80004a4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    if(FIFONumber == CAN_FIFO0)
 80004a8:	b929      	cbnz	r1, 80004b6 <HAL_CAN_Receive_IT+0x54>
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 80004aa:	6953      	ldr	r3, [r2, #20]
  {
    return HAL_BUSY;
  }
  
  /* Return function status */
  return HAL_OK;
 80004ac:	4608      	mov	r0, r1
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 80004ae:	f043 0302 	orr.w	r3, r3, #2
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	bd10      	pop	{r4, pc}
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 80004b6:	6951      	ldr	r1, [r2, #20]
  return HAL_OK;
 80004b8:	4618      	mov	r0, r3
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 80004ba:	f041 0110 	orr.w	r1, r1, #16
 80004be:	6151      	str	r1, [r2, #20]
 80004c0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80004c2:	2002      	movs	r0, #2
}
 80004c4:	bd10      	pop	{r4, pc}

080004c6 <HAL_CAN_TxCpltCallback>:
 80004c6:	4770      	bx	lr

080004c8 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80004c8:	b570      	push	{r4, r5, r6, lr}
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80004ca:	6804      	ldr	r4, [r0, #0]
 80004cc:	010a      	lsls	r2, r1, #4
 80004ce:	18a5      	adds	r5, r4, r2
 80004d0:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
 80004d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80004d6:	f006 0604 	and.w	r6, r6, #4
 80004da:	609e      	str	r6, [r3, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d14f      	bne.n	8000580 <CAN_Receive_IT+0xb8>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 80004e0:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
 80004e4:	0d76      	lsrs	r6, r6, #21
 80004e6:	601e      	str	r6, [r3, #0]
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80004e8:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 80004ec:	4422      	add	r2, r4
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80004ee:	f006 0602 	and.w	r6, r6, #2
 80004f2:	60de      	str	r6, [r3, #12]
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 80004f4:	f8d5 61b4 	ldr.w	r6, [r5, #436]	; 0x1b4
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80004f8:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 80004fc:	f006 060f 	and.w	r6, r6, #15
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000500:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8000504:	61dd      	str	r5, [r3, #28]
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000506:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 800050a:	611e      	str	r6, [r3, #16]
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 800050c:	751d      	strb	r5, [r3, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 800050e:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
 8000512:	0a2d      	lsrs	r5, r5, #8
 8000514:	755d      	strb	r5, [r3, #21]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000516:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
 800051a:	0c2d      	lsrs	r5, r5, #16
 800051c:	759d      	strb	r5, [r3, #22]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 800051e:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
 8000522:	0e2d      	lsrs	r5, r5, #24
 8000524:	75dd      	strb	r5, [r3, #23]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8000526:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
 800052a:	761d      	strb	r5, [r3, #24]
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 800052c:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
 8000530:	0a2d      	lsrs	r5, r5, #8
 8000532:	765d      	strb	r5, [r3, #25]
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000534:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
 8000538:	0c2d      	lsrs	r5, r5, #16
 800053a:	769d      	strb	r5, [r3, #26]
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 800053c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000540:	0e12      	lsrs	r2, r2, #24
 8000542:	76da      	strb	r2, [r3, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000544:	bb09      	cbnz	r1, 800058a <CAN_Receive_IT+0xc2>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000546:	68e3      	ldr	r3, [r4, #12]
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	60e3      	str	r3, [r4, #12]
    
    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 800054e:	6963      	ldr	r3, [r4, #20]
 8000550:	f023 0302 	bic.w	r3, r3, #2
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
    
    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 8000554:	6163      	str	r3, [r4, #20]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8000556:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800055a:	2b22      	cmp	r3, #34	; 0x22
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 800055c:	bf01      	itttt	eq
 800055e:	6802      	ldreq	r2, [r0, #0]
 8000560:	6953      	ldreq	r3, [r2, #20]
 8000562:	f423 430f 	biceq.w	r3, r3, #36608	; 0x8f00
 8000566:	6153      	streq	r3, [r2, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000568:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800056c:	2b32      	cmp	r3, #50	; 0x32
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 800056e:	bf0c      	ite	eq
 8000570:	2312      	moveq	r3, #18
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000572:	2301      	movne	r3, #1
 8000574:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000578:	f001 f8e0 	bl	800173c <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 800057c:	2000      	movs	r0, #0
 800057e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000580:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
 8000584:	08f6      	lsrs	r6, r6, #3
 8000586:	605e      	str	r6, [r3, #4]
 8000588:	e7ae      	b.n	80004e8 <CAN_Receive_IT+0x20>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 800058a:	6923      	ldr	r3, [r4, #16]
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	6123      	str	r3, [r4, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 8000592:	6963      	ldr	r3, [r4, #20]
 8000594:	f023 0310 	bic.w	r3, r3, #16
 8000598:	e7dc      	b.n	8000554 <CAN_Receive_IT+0x8c>
	...

0800059c <HAL_CAN_IRQHandler>:
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 800059c:	6803      	ldr	r3, [r0, #0]
{
 800059e:	b510      	push	{r4, lr}
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 80005a0:	695a      	ldr	r2, [r3, #20]
{
 80005a2:	4604      	mov	r4, r0
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 80005a4:	07d2      	lsls	r2, r2, #31
 80005a6:	d522      	bpl.n	80005ee <HAL_CAN_IRQHandler+0x52>
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80005a8:	6899      	ldr	r1, [r3, #8]
 80005aa:	4a52      	ldr	r2, [pc, #328]	; (80006f4 <HAL_CAN_IRQHandler+0x158>)
 80005ac:	438a      	bics	r2, r1
 80005ae:	d007      	beq.n	80005c0 <HAL_CAN_IRQHandler+0x24>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80005b0:	6899      	ldr	r1, [r3, #8]
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80005b2:	4a51      	ldr	r2, [pc, #324]	; (80006f8 <HAL_CAN_IRQHandler+0x15c>)
 80005b4:	438a      	bics	r2, r1
 80005b6:	d003      	beq.n	80005c0 <HAL_CAN_IRQHandler+0x24>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 80005b8:	6899      	ldr	r1, [r3, #8]
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80005ba:	4a50      	ldr	r2, [pc, #320]	; (80006fc <HAL_CAN_IRQHandler+0x160>)
 80005bc:	438a      	bics	r2, r1
 80005be:	d116      	bne.n	80005ee <HAL_CAN_IRQHandler+0x52>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 80005c0:	695a      	ldr	r2, [r3, #20]
  HAL_CAN_TxCpltCallback(hcan);
 80005c2:	4620      	mov	r0, r4
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 80005c4:	f022 0201 	bic.w	r2, r2, #1
 80005c8:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 80005ca:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80005ce:	2a12      	cmp	r2, #18
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80005d0:	bf02      	ittt	eq
 80005d2:	695a      	ldreq	r2, [r3, #20]
 80005d4:	f422 420f 	biceq.w	r2, r2, #36608	; 0x8f00
 80005d8:	615a      	streq	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 80005da:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80005de:	2b32      	cmp	r3, #50	; 0x32
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 80005e0:	bf0c      	ite	eq
 80005e2:	2322      	moveq	r3, #34	; 0x22
    hcan->State = HAL_CAN_STATE_READY;
 80005e4:	2301      	movne	r3, #1
 80005e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_CAN_TxCpltCallback(hcan);
 80005ea:	f7ff ff6c 	bl	80004c6 <HAL_CAN_TxCpltCallback>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 80005ee:	6823      	ldr	r3, [r4, #0]
 80005f0:	695a      	ldr	r2, [r3, #20]
 80005f2:	0790      	lsls	r0, r2, #30
 80005f4:	d506      	bpl.n	8000604 <HAL_CAN_IRQHandler+0x68>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
 80005f6:	68db      	ldr	r3, [r3, #12]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 80005f8:	0799      	lsls	r1, r3, #30
 80005fa:	d003      	beq.n	8000604 <HAL_CAN_IRQHandler+0x68>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 80005fc:	2100      	movs	r1, #0
 80005fe:	4620      	mov	r0, r4
 8000600:	f7ff ff62 	bl	80004c8 <CAN_Receive_IT>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8000604:	6823      	ldr	r3, [r4, #0]
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	06d2      	lsls	r2, r2, #27
 800060a:	d506      	bpl.n	800061a <HAL_CAN_IRQHandler+0x7e>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
 800060c:	691b      	ldr	r3, [r3, #16]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 800060e:	0798      	lsls	r0, r3, #30
 8000610:	d003      	beq.n	800061a <HAL_CAN_IRQHandler+0x7e>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000612:	2101      	movs	r1, #1
 8000614:	4620      	mov	r0, r4
 8000616:	f7ff ff57 	bl	80004c8 <CAN_Receive_IT>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	699a      	ldr	r2, [r3, #24]
 800061e:	07d1      	lsls	r1, r2, #31
 8000620:	d509      	bpl.n	8000636 <HAL_CAN_IRQHandler+0x9a>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000622:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000624:	05d2      	lsls	r2, r2, #23
 8000626:	d506      	bpl.n	8000636 <HAL_CAN_IRQHandler+0x9a>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000628:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800062a:	0410      	lsls	r0, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 800062c:	bf42      	ittt	mi
 800062e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000630:	f042 0201 	orrmi.w	r2, r2, #1
 8000634:	63e2      	strmi	r2, [r4, #60]	; 0x3c
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000636:	699a      	ldr	r2, [r3, #24]
 8000638:	0791      	lsls	r1, r2, #30
 800063a:	d509      	bpl.n	8000650 <HAL_CAN_IRQHandler+0xb4>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 800063c:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 800063e:	0592      	lsls	r2, r2, #22
 8000640:	d506      	bpl.n	8000650 <HAL_CAN_IRQHandler+0xb4>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000642:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000644:	0410      	lsls	r0, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000646:	bf42      	ittt	mi
 8000648:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800064a:	f042 0202 	orrmi.w	r2, r2, #2
 800064e:	63e2      	strmi	r2, [r4, #60]	; 0x3c
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000650:	699a      	ldr	r2, [r3, #24]
 8000652:	0751      	lsls	r1, r2, #29
 8000654:	d509      	bpl.n	800066a <HAL_CAN_IRQHandler+0xce>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000656:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000658:	0552      	lsls	r2, r2, #21
 800065a:	d506      	bpl.n	800066a <HAL_CAN_IRQHandler+0xce>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800065c:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 800065e:	0410      	lsls	r0, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000660:	bf42      	ittt	mi
 8000662:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000664:	f042 0204 	orrmi.w	r2, r2, #4
 8000668:	63e2      	strmi	r2, [r4, #60]	; 0x3c
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 800066a:	699a      	ldr	r2, [r3, #24]
 800066c:	f012 0f70 	tst.w	r2, #112	; 0x70
 8000670:	d013      	beq.n	800069a <HAL_CAN_IRQHandler+0xfe>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8000672:	695a      	ldr	r2, [r3, #20]
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000674:	0511      	lsls	r1, r2, #20
 8000676:	d510      	bpl.n	800069a <HAL_CAN_IRQHandler+0xfe>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000678:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 800067a:	0412      	lsls	r2, r2, #16
 800067c:	d50d      	bpl.n	800069a <HAL_CAN_IRQHandler+0xfe>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 800067e:	699a      	ldr	r2, [r3, #24]
 8000680:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000684:	2a30      	cmp	r2, #48	; 0x30
 8000686:	d028      	beq.n	80006da <HAL_CAN_IRQHandler+0x13e>
 8000688:	d814      	bhi.n	80006b4 <HAL_CAN_IRQHandler+0x118>
 800068a:	2a10      	cmp	r2, #16
 800068c:	d01c      	beq.n	80006c8 <HAL_CAN_IRQHandler+0x12c>
 800068e:	2a20      	cmp	r2, #32
 8000690:	d01f      	beq.n	80006d2 <HAL_CAN_IRQHandler+0x136>
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000692:	699a      	ldr	r2, [r3, #24]
 8000694:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000698:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 800069a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800069c:	b14a      	cbz	r2, 80006b2 <HAL_CAN_IRQHandler+0x116>
    hcan->Instance->MSR |= CAN_MSR_ERRI; 
 800069e:	685a      	ldr	r2, [r3, #4]
    HAL_CAN_ErrorCallback(hcan);
 80006a0:	4620      	mov	r0, r4
    hcan->Instance->MSR |= CAN_MSR_ERRI; 
 80006a2:	f042 0204 	orr.w	r2, r2, #4
 80006a6:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 80006a8:	2301      	movs	r3, #1
 80006aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_CAN_ErrorCallback(hcan);
 80006ae:	f001 f83d 	bl	800172c <HAL_CAN_ErrorCallback>
 80006b2:	bd10      	pop	{r4, pc}
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 80006b4:	2a50      	cmp	r2, #80	; 0x50
 80006b6:	d014      	beq.n	80006e2 <HAL_CAN_IRQHandler+0x146>
 80006b8:	2a60      	cmp	r2, #96	; 0x60
 80006ba:	d016      	beq.n	80006ea <HAL_CAN_IRQHandler+0x14e>
 80006bc:	2a40      	cmp	r2, #64	; 0x40
 80006be:	d1e8      	bne.n	8000692 <HAL_CAN_IRQHandler+0xf6>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80006c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80006c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006c6:	e002      	b.n	80006ce <HAL_CAN_IRQHandler+0x132>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 80006c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80006ca:	f042 0208 	orr.w	r2, r2, #8
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80006ce:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
 80006d0:	e7df      	b.n	8000692 <HAL_CAN_IRQHandler+0xf6>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 80006d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80006d4:	f042 0210 	orr.w	r2, r2, #16
 80006d8:	e7f9      	b.n	80006ce <HAL_CAN_IRQHandler+0x132>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 80006da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80006dc:	f042 0220 	orr.w	r2, r2, #32
 80006e0:	e7f5      	b.n	80006ce <HAL_CAN_IRQHandler+0x132>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 80006e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80006e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006e8:	e7f1      	b.n	80006ce <HAL_CAN_IRQHandler+0x132>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80006ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80006ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006f0:	e7ed      	b.n	80006ce <HAL_CAN_IRQHandler+0x132>
 80006f2:	bf00      	nop
 80006f4:	04000003 	.word	0x04000003
 80006f8:	08000300 	.word	0x08000300
 80006fc:	10030000 	.word	0x10030000

08000700 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000702:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000706:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800070e:	041b      	lsls	r3, r3, #16
 8000710:	0c1b      	lsrs	r3, r3, #16
 8000712:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800071a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800071c:	60d3      	str	r3, [r2, #12]
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	68dc      	ldr	r4, [r3, #12]
 800072a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	2b04      	cmp	r3, #4
 8000736:	bf28      	it	cs
 8000738:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000740:	bf98      	it	ls
 8000742:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	fa05 f303 	lsl.w	r3, r5, r3
 8000748:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074c:	bf88      	it	hi
 800074e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	4019      	ands	r1, r3
 8000752:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	fa05 f404 	lsl.w	r4, r5, r4
 8000758:	3c01      	subs	r4, #1
 800075a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800075c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075e:	ea42 0201 	orr.w	r2, r2, r1
 8000762:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	bfaf      	iteee	ge
 8000768:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	4b06      	ldrlt	r3, [pc, #24]	; (8000788 <HAL_NVIC_SetPriority+0x64>)
 800076e:	f000 000f 	andlt.w	r0, r0, #15
 8000772:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	bfa5      	ittet	ge
 8000776:	b2d2      	uxtbge	r2, r2
 8000778:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000782:	bd30      	pop	{r4, r5, pc}
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	e000ed14 	.word	0xe000ed14

0800078c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800078c:	2301      	movs	r3, #1
 800078e:	0942      	lsrs	r2, r0, #5
 8000790:	f000 001f 	and.w	r0, r0, #31
 8000794:	fa03 f000 	lsl.w	r0, r3, r0
 8000798:	4b01      	ldr	r3, [pc, #4]	; (80007a0 <HAL_NVIC_EnableIRQ+0x14>)
 800079a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800079e:	4770      	bx	lr
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	3801      	subs	r0, #1
 80007a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007aa:	d20a      	bcs.n	80007c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007d2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	bf0c      	ite	eq
 80007d8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007dc:	f022 0204 	bicne.w	r2, r2, #4
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	4770      	bx	lr
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007e8:	4770      	bx	lr

080007ea <HAL_SYSTICK_IRQHandler>:
{
 80007ea:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007ec:	f7ff fffc 	bl	80007e8 <HAL_SYSTICK_Callback>
 80007f0:	bd08      	pop	{r3, pc}
	...

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80007f8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80007fa:	4616      	mov	r6, r2
 80007fc:	4b65      	ldr	r3, [pc, #404]	; (8000994 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007fe:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80009a4 <HAL_GPIO_Init+0x1b0>
 8000802:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80009a8 <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 8000806:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800080a:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800080c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000810:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000814:	45a0      	cmp	r8, r4
 8000816:	d17f      	bne.n	8000918 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000818:	684d      	ldr	r5, [r1, #4]
 800081a:	2d12      	cmp	r5, #18
 800081c:	f000 80af 	beq.w	800097e <HAL_GPIO_Init+0x18a>
 8000820:	f200 8088 	bhi.w	8000934 <HAL_GPIO_Init+0x140>
 8000824:	2d02      	cmp	r5, #2
 8000826:	f000 80a7 	beq.w	8000978 <HAL_GPIO_Init+0x184>
 800082a:	d87c      	bhi.n	8000926 <HAL_GPIO_Init+0x132>
 800082c:	2d00      	cmp	r5, #0
 800082e:	f000 808e 	beq.w	800094e <HAL_GPIO_Init+0x15a>
 8000832:	2d01      	cmp	r5, #1
 8000834:	f000 809e 	beq.w	8000974 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000838:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800083c:	2cff      	cmp	r4, #255	; 0xff
 800083e:	bf93      	iteet	ls
 8000840:	4682      	movls	sl, r0
 8000842:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000846:	3d08      	subhi	r5, #8
 8000848:	f8d0 b000 	ldrls.w	fp, [r0]
 800084c:	bf92      	itee	ls
 800084e:	00b5      	lslls	r5, r6, #2
 8000850:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000854:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000856:	fa09 f805 	lsl.w	r8, r9, r5
 800085a:	ea2b 0808 	bic.w	r8, fp, r8
 800085e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000862:	bf88      	it	hi
 8000864:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000868:	ea48 0505 	orr.w	r5, r8, r5
 800086c:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000870:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000874:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000878:	d04e      	beq.n	8000918 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800087a:	4d47      	ldr	r5, [pc, #284]	; (8000998 <HAL_GPIO_Init+0x1a4>)
 800087c:	4f46      	ldr	r7, [pc, #280]	; (8000998 <HAL_GPIO_Init+0x1a4>)
 800087e:	69ad      	ldr	r5, [r5, #24]
 8000880:	f026 0803 	bic.w	r8, r6, #3
 8000884:	f045 0501 	orr.w	r5, r5, #1
 8000888:	61bd      	str	r5, [r7, #24]
 800088a:	69bd      	ldr	r5, [r7, #24]
 800088c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000890:	f005 0501 	and.w	r5, r5, #1
 8000894:	9501      	str	r5, [sp, #4]
 8000896:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800089a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800089e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 80008a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008a8:	fa09 f90b 	lsl.w	r9, r9, fp
 80008ac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008b0:	4d3a      	ldr	r5, [pc, #232]	; (800099c <HAL_GPIO_Init+0x1a8>)
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	d068      	beq.n	8000988 <HAL_GPIO_Init+0x194>
 80008b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ba:	42a8      	cmp	r0, r5
 80008bc:	d066      	beq.n	800098c <HAL_GPIO_Init+0x198>
 80008be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008c2:	42a8      	cmp	r0, r5
 80008c4:	d064      	beq.n	8000990 <HAL_GPIO_Init+0x19c>
 80008c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ca:	42a8      	cmp	r0, r5
 80008cc:	bf0c      	ite	eq
 80008ce:	2503      	moveq	r5, #3
 80008d0:	2504      	movne	r5, #4
 80008d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80008d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 80008da:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80008de:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80008e4:	bf14      	ite	ne
 80008e6:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80008e8:	43a5      	biceq	r5, r4
 80008ea:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80008ec:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80008f2:	bf14      	ite	ne
 80008f4:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80008f6:	43a5      	biceq	r5, r4
 80008f8:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80008fa:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000900:	bf14      	ite	ne
 8000902:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000904:	43a5      	biceq	r5, r4
 8000906:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000908:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800090a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 800090e:	bf14      	ite	ne
 8000910:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000912:	ea25 0404 	biceq.w	r4, r5, r4
 8000916:	60dc      	str	r4, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000918:	3601      	adds	r6, #1
 800091a:	2e10      	cmp	r6, #16
 800091c:	f47f af73 	bne.w	8000806 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000920:	b003      	add	sp, #12
 8000922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000926:	2d03      	cmp	r5, #3
 8000928:	d022      	beq.n	8000970 <HAL_GPIO_Init+0x17c>
 800092a:	2d11      	cmp	r5, #17
 800092c:	d184      	bne.n	8000838 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800092e:	68ca      	ldr	r2, [r1, #12]
 8000930:	3204      	adds	r2, #4
          break;
 8000932:	e781      	b.n	8000838 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000934:	4f1a      	ldr	r7, [pc, #104]	; (80009a0 <HAL_GPIO_Init+0x1ac>)
 8000936:	42bd      	cmp	r5, r7
 8000938:	d009      	beq.n	800094e <HAL_GPIO_Init+0x15a>
 800093a:	d812      	bhi.n	8000962 <HAL_GPIO_Init+0x16e>
 800093c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80009ac <HAL_GPIO_Init+0x1b8>
 8000940:	454d      	cmp	r5, r9
 8000942:	d004      	beq.n	800094e <HAL_GPIO_Init+0x15a>
 8000944:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000948:	454d      	cmp	r5, r9
 800094a:	f47f af75 	bne.w	8000838 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800094e:	688a      	ldr	r2, [r1, #8]
 8000950:	b1c2      	cbz	r2, 8000984 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000952:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000954:	bf0c      	ite	eq
 8000956:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800095a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800095e:	2208      	movs	r2, #8
 8000960:	e76a      	b.n	8000838 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000962:	4575      	cmp	r5, lr
 8000964:	d0f3      	beq.n	800094e <HAL_GPIO_Init+0x15a>
 8000966:	4565      	cmp	r5, ip
 8000968:	d0f1      	beq.n	800094e <HAL_GPIO_Init+0x15a>
 800096a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80009b0 <HAL_GPIO_Init+0x1bc>
 800096e:	e7eb      	b.n	8000948 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000970:	2200      	movs	r2, #0
 8000972:	e761      	b.n	8000838 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000974:	68ca      	ldr	r2, [r1, #12]
          break;
 8000976:	e75f      	b.n	8000838 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000978:	68ca      	ldr	r2, [r1, #12]
 800097a:	3208      	adds	r2, #8
          break;
 800097c:	e75c      	b.n	8000838 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800097e:	68ca      	ldr	r2, [r1, #12]
 8000980:	320c      	adds	r2, #12
          break;
 8000982:	e759      	b.n	8000838 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000984:	2204      	movs	r2, #4
 8000986:	e757      	b.n	8000838 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000988:	2500      	movs	r5, #0
 800098a:	e7a2      	b.n	80008d2 <HAL_GPIO_Init+0xde>
 800098c:	2501      	movs	r5, #1
 800098e:	e7a0      	b.n	80008d2 <HAL_GPIO_Init+0xde>
 8000990:	2502      	movs	r5, #2
 8000992:	e79e      	b.n	80008d2 <HAL_GPIO_Init+0xde>
 8000994:	40010400 	.word	0x40010400
 8000998:	40021000 	.word	0x40021000
 800099c:	40010800 	.word	0x40010800
 80009a0:	10210000 	.word	0x10210000
 80009a4:	10310000 	.word	0x10310000
 80009a8:	10320000 	.word	0x10320000
 80009ac:	10110000 	.word	0x10110000
 80009b0:	10220000 	.word	0x10220000

080009b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009b4:	b10a      	cbz	r2, 80009ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80009b6:	6101      	str	r1, [r0, #16]
 80009b8:	4770      	bx	lr
 80009ba:	0409      	lsls	r1, r1, #16
 80009bc:	e7fb      	b.n	80009b6 <HAL_GPIO_WritePin+0x2>

080009be <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80009be:	68c3      	ldr	r3, [r0, #12]
 80009c0:	4059      	eors	r1, r3
 80009c2:	60c1      	str	r1, [r0, #12]
 80009c4:	4770      	bx	lr
	...

080009c8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c8:	6803      	ldr	r3, [r0, #0]
{
 80009ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ce:	07dc      	lsls	r4, r3, #31
{
 80009d0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009d2:	d438      	bmi.n	8000a46 <HAL_RCC_OscConfig+0x7e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	0798      	lsls	r0, r3, #30
 80009d8:	f100 80ab 	bmi.w	8000b32 <HAL_RCC_OscConfig+0x16a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	0719      	lsls	r1, r3, #28
 80009e0:	d523      	bpl.n	8000a2a <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009e2:	69ea      	ldr	r2, [r5, #28]
 80009e4:	4cc0      	ldr	r4, [pc, #768]	; (8000ce8 <HAL_RCC_OscConfig+0x320>)
 80009e6:	2301      	movs	r3, #1
 80009e8:	49c0      	ldr	r1, [pc, #768]	; (8000cec <HAL_RCC_OscConfig+0x324>)
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f000 8119 	beq.w	8000c22 <HAL_RCC_OscConfig+0x25a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f0:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009f4:	fab2 f282 	clz	r2, r2
 80009f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009fc:	f7ff fc3e 	bl	800027c <HAL_GetTick>
 8000a00:	2602      	movs	r6, #2
 8000a02:	4607      	mov	r7, r0
 8000a04:	fa96 f3a6 	rbit	r3, r6
 8000a08:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a0e:	fa96 f3a6 	rbit	r3, r6
 8000a12:	fab3 f383 	clz	r3, r3
 8000a16:	f003 031f 	and.w	r3, r3, #31
 8000a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1e:	07da      	lsls	r2, r3, #31
 8000a20:	f140 80f8 	bpl.w	8000c14 <HAL_RCC_OscConfig+0x24c>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fc2f 	bl	8000288 <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	0758      	lsls	r0, r3, #29
 8000a2e:	f100 8118 	bmi.w	8000c62 <HAL_RCC_OscConfig+0x29a>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8000a32:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000a34:	2a00      	cmp	r2, #0
 8000a36:	f040 8197 	bne.w	8000d68 <HAL_RCC_OscConfig+0x3a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a3a:	6a2a      	ldr	r2, [r5, #32]
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	f040 822d 	bne.w	8000e9c <HAL_RCC_OscConfig+0x4d4>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a42:	2000      	movs	r0, #0
 8000a44:	e020      	b.n	8000a88 <HAL_RCC_OscConfig+0xc0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a46:	4ca8      	ldr	r4, [pc, #672]	; (8000ce8 <HAL_RCC_OscConfig+0x320>)
 8000a48:	6863      	ldr	r3, [r4, #4]
 8000a4a:	f003 030c 	and.w	r3, r3, #12
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d007      	beq.n	8000a62 <HAL_RCC_OscConfig+0x9a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a52:	6863      	ldr	r3, [r4, #4]
 8000a54:	f003 030c 	and.w	r3, r3, #12
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d118      	bne.n	8000a8e <HAL_RCC_OscConfig+0xc6>
 8000a5c:	6863      	ldr	r3, [r4, #4]
 8000a5e:	03d9      	lsls	r1, r3, #15
 8000a60:	d515      	bpl.n	8000a8e <HAL_RCC_OscConfig+0xc6>
 8000a62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a66:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6a:	6822      	ldr	r2, [r4, #0]
 8000a6c:	fa93 f3a3 	rbit	r3, r3
 8000a70:	fab3 f383 	clz	r3, r3
 8000a74:	f003 031f 	and.w	r3, r3, #31
 8000a78:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7c:	07da      	lsls	r2, r3, #31
 8000a7e:	d5a9      	bpl.n	80009d4 <HAL_RCC_OscConfig+0xc>
 8000a80:	68ab      	ldr	r3, [r5, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1a6      	bne.n	80009d4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a86:	2001      	movs	r0, #1
}
 8000a88:	b003      	add	sp, #12
 8000a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a8e:	68ab      	ldr	r3, [r5, #8]
 8000a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a94:	d11c      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x108>
 8000a96:	6823      	ldr	r3, [r4, #0]
 8000a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a9e:	f7ff fbed 	bl	800027c <HAL_GetTick>
 8000aa2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000aa6:	4607      	mov	r7, r0
 8000aa8:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aac:	6822      	ldr	r2, [r4, #0]
 8000aae:	fa96 f3a6 	rbit	r3, r6
 8000ab2:	fab3 f383 	clz	r3, r3
 8000ab6:	f003 031f 	and.w	r3, r3, #31
 8000aba:	fa22 f303 	lsr.w	r3, r2, r3
 8000abe:	07db      	lsls	r3, r3, #31
 8000ac0:	d488      	bmi.n	80009d4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac2:	f7ff fbdb 	bl	800027c <HAL_GetTick>
 8000ac6:	1bc0      	subs	r0, r0, r7
 8000ac8:	2864      	cmp	r0, #100	; 0x64
 8000aca:	d9ed      	bls.n	8000aa8 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8000acc:	2003      	movs	r0, #3
 8000ace:	e7db      	b.n	8000a88 <HAL_RCC_OscConfig+0xc0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad0:	bb03      	cbnz	r3, 8000b14 <HAL_RCC_OscConfig+0x14c>
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000adc:	6023      	str	r3, [r4, #0]
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ae6:	f7ff fbc9 	bl	800027c <HAL_GetTick>
 8000aea:	4607      	mov	r7, r0
 8000aec:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	fa96 f3a6 	rbit	r3, r6
 8000af6:	fab3 f383 	clz	r3, r3
 8000afa:	f003 031f 	and.w	r3, r3, #31
 8000afe:	fa22 f303 	lsr.w	r3, r2, r3
 8000b02:	07d8      	lsls	r0, r3, #31
 8000b04:	f57f af66 	bpl.w	80009d4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b08:	f7ff fbb8 	bl	800027c <HAL_GetTick>
 8000b0c:	1bc0      	subs	r0, r0, r7
 8000b0e:	2864      	cmp	r0, #100	; 0x64
 8000b10:	d9ec      	bls.n	8000aec <HAL_RCC_OscConfig+0x124>
 8000b12:	e7db      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	d103      	bne.n	8000b24 <HAL_RCC_OscConfig+0x15c>
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b20:	6023      	str	r3, [r4, #0]
 8000b22:	e7b8      	b.n	8000a96 <HAL_RCC_OscConfig+0xce>
 8000b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b28:	6023      	str	r3, [r4, #0]
 8000b2a:	6823      	ldr	r3, [r4, #0]
 8000b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b30:	e7b4      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b32:	4c6d      	ldr	r4, [pc, #436]	; (8000ce8 <HAL_RCC_OscConfig+0x320>)
 8000b34:	6863      	ldr	r3, [r4, #4]
 8000b36:	f013 0f0c 	tst.w	r3, #12
 8000b3a:	d007      	beq.n	8000b4c <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b3c:	6863      	ldr	r3, [r4, #4]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d120      	bne.n	8000b88 <HAL_RCC_OscConfig+0x1c0>
 8000b46:	6863      	ldr	r3, [r4, #4]
 8000b48:	03d9      	lsls	r1, r3, #15
 8000b4a:	d41d      	bmi.n	8000b88 <HAL_RCC_OscConfig+0x1c0>
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b52:	6822      	ldr	r2, [r4, #0]
 8000b54:	fa93 f3a3 	rbit	r3, r3
 8000b58:	fab3 f383 	clz	r3, r3
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	fa22 f303 	lsr.w	r3, r2, r3
 8000b64:	07da      	lsls	r2, r3, #31
 8000b66:	d502      	bpl.n	8000b6e <HAL_RCC_OscConfig+0x1a6>
 8000b68:	696b      	ldr	r3, [r5, #20]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d18b      	bne.n	8000a86 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6e:	6821      	ldr	r1, [r4, #0]
 8000b70:	23f8      	movs	r3, #248	; 0xf8
 8000b72:	fa93 f3a3 	rbit	r3, r3
 8000b76:	fab3 f283 	clz	r2, r3
 8000b7a:	69ab      	ldr	r3, [r5, #24]
 8000b7c:	4093      	lsls	r3, r2
 8000b7e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000b82:	4313      	orrs	r3, r2
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	e729      	b.n	80009dc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b88:	696a      	ldr	r2, [r5, #20]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	b302      	cbz	r2, 8000bd0 <HAL_RCC_OscConfig+0x208>
 8000b8e:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000b9c:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000ba0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fb6b 	bl	800027c <HAL_GetTick>
 8000ba6:	2602      	movs	r6, #2
 8000ba8:	4607      	mov	r7, r0
 8000baa:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bae:	6822      	ldr	r2, [r4, #0]
 8000bb0:	fa96 f3a6 	rbit	r3, r6
 8000bb4:	fab3 f383 	clz	r3, r3
 8000bb8:	f003 031f 	and.w	r3, r3, #31
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	07db      	lsls	r3, r3, #31
 8000bc2:	d4d4      	bmi.n	8000b6e <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bc4:	f7ff fb5a 	bl	800027c <HAL_GetTick>
 8000bc8:	1bc0      	subs	r0, r0, r7
 8000bca:	2802      	cmp	r0, #2
 8000bcc:	d9ed      	bls.n	8000baa <HAL_RCC_OscConfig+0x1e2>
 8000bce:	e77d      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
 8000bd0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000bd4:	fab3 f383 	clz	r3, r3
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000bde:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000be2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000be4:	f7ff fb4a 	bl	800027c <HAL_GetTick>
 8000be8:	2602      	movs	r6, #2
 8000bea:	4607      	mov	r7, r0
 8000bec:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf0:	6822      	ldr	r2, [r4, #0]
 8000bf2:	fa96 f3a6 	rbit	r3, r6
 8000bf6:	fab3 f383 	clz	r3, r3
 8000bfa:	f003 031f 	and.w	r3, r3, #31
 8000bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000c02:	07d8      	lsls	r0, r3, #31
 8000c04:	f57f aeea 	bpl.w	80009dc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c08:	f7ff fb38 	bl	800027c <HAL_GetTick>
 8000c0c:	1bc0      	subs	r0, r0, r7
 8000c0e:	2802      	cmp	r0, #2
 8000c10:	d9ec      	bls.n	8000bec <HAL_RCC_OscConfig+0x224>
 8000c12:	e75b      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c14:	f7ff fb32 	bl	800027c <HAL_GetTick>
 8000c18:	1bc0      	subs	r0, r0, r7
 8000c1a:	2802      	cmp	r0, #2
 8000c1c:	f67f aef2 	bls.w	8000a04 <HAL_RCC_OscConfig+0x3c>
 8000c20:	e754      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
 8000c22:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 8000c26:	fab3 f383 	clz	r3, r3
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 8000c2e:	f7ff fb25 	bl	800027c <HAL_GetTick>
 8000c32:	2602      	movs	r6, #2
 8000c34:	4607      	mov	r7, r0
 8000c36:	fa96 f3a6 	rbit	r3, r6
 8000c3a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c40:	fa96 f3a6 	rbit	r3, r6
 8000c44:	fab3 f383 	clz	r3, r3
 8000c48:	f003 031f 	and.w	r3, r3, #31
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	07db      	lsls	r3, r3, #31
 8000c52:	f57f aeea 	bpl.w	8000a2a <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c56:	f7ff fb11 	bl	800027c <HAL_GetTick>
 8000c5a:	1bc0      	subs	r0, r0, r7
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d9ea      	bls.n	8000c36 <HAL_RCC_OscConfig+0x26e>
 8000c60:	e734      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4c21      	ldr	r4, [pc, #132]	; (8000ce8 <HAL_RCC_OscConfig+0x320>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c64:	4e22      	ldr	r6, [pc, #136]	; (8000cf0 <HAL_RCC_OscConfig+0x328>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	69e3      	ldr	r3, [r4, #28]
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	61e3      	str	r3, [r4, #28]
 8000c6e:	69e3      	ldr	r3, [r4, #28]
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c78:	6833      	ldr	r3, [r6, #0]
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c80:	f7ff fafc 	bl	800027c <HAL_GetTick>
 8000c84:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000c86:	6833      	ldr	r3, [r6, #0]
 8000c88:	05d9      	lsls	r1, r3, #23
 8000c8a:	d526      	bpl.n	8000cda <HAL_RCC_OscConfig+0x312>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c8c:	692b      	ldr	r3, [r5, #16]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d130      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x32c>
 8000c92:	6a23      	ldr	r3, [r4, #32]
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c9a:	f7ff faef 	bl	800027c <HAL_GetTick>
 8000c9e:	2602      	movs	r6, #2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ca4:	f241 3788 	movw	r7, #5000	; 0x1388
 8000ca8:	fa96 f3a6 	rbit	r3, r6
 8000cac:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d055      	beq.n	8000d60 <HAL_RCC_OscConfig+0x398>
 8000cb4:	6a22      	ldr	r2, [r4, #32]
 8000cb6:	fa98 f3a8 	rbit	r3, r8
 8000cba:	fab3 f383 	clz	r3, r3
 8000cbe:	f003 031f 	and.w	r3, r3, #31
 8000cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc6:	07da      	lsls	r2, r3, #31
 8000cc8:	f53f aeb3 	bmi.w	8000a32 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fad6 	bl	800027c <HAL_GetTick>
 8000cd0:	eba0 0009 	sub.w	r0, r0, r9
 8000cd4:	42b8      	cmp	r0, r7
 8000cd6:	d9e7      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x2e0>
 8000cd8:	e6f8      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cda:	f7ff facf 	bl	800027c <HAL_GetTick>
 8000cde:	1bc0      	subs	r0, r0, r7
 8000ce0:	2864      	cmp	r0, #100	; 0x64
 8000ce2:	d9d0      	bls.n	8000c86 <HAL_RCC_OscConfig+0x2be>
 8000ce4:	e6f2      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	42420480 	.word	0x42420480
 8000cf0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cf4:	bb33      	cbnz	r3, 8000d44 <HAL_RCC_OscConfig+0x37c>
 8000cf6:	6a23      	ldr	r3, [r4, #32]
 8000cf8:	2602      	movs	r6, #2
 8000cfa:	f023 0301 	bic.w	r3, r3, #1
 8000cfe:	6223      	str	r3, [r4, #32]
 8000d00:	6a23      	ldr	r3, [r4, #32]
 8000d02:	4637      	mov	r7, r6
 8000d04:	f023 0304 	bic.w	r3, r3, #4
 8000d08:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d0a:	f7ff fab7 	bl	800027c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d0e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d12:	4680      	mov	r8, r0
 8000d14:	fa96 f3a6 	rbit	r3, r6
 8000d18:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d1c:	b313      	cbz	r3, 8000d64 <HAL_RCC_OscConfig+0x39c>
 8000d1e:	6a22      	ldr	r2, [r4, #32]
 8000d20:	fa97 f3a7 	rbit	r3, r7
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	f003 031f 	and.w	r3, r3, #31
 8000d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d30:	07db      	lsls	r3, r3, #31
 8000d32:	f57f ae7e 	bpl.w	8000a32 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d36:	f7ff faa1 	bl	800027c <HAL_GetTick>
 8000d3a:	eba0 0008 	sub.w	r0, r0, r8
 8000d3e:	4548      	cmp	r0, r9
 8000d40:	d9e8      	bls.n	8000d14 <HAL_RCC_OscConfig+0x34c>
 8000d42:	e6c3      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d44:	2b05      	cmp	r3, #5
 8000d46:	6a23      	ldr	r3, [r4, #32]
 8000d48:	d103      	bne.n	8000d52 <HAL_RCC_OscConfig+0x38a>
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6223      	str	r3, [r4, #32]
 8000d50:	e79f      	b.n	8000c92 <HAL_RCC_OscConfig+0x2ca>
 8000d52:	f023 0301 	bic.w	r3, r3, #1
 8000d56:	6223      	str	r3, [r4, #32]
 8000d58:	6a23      	ldr	r3, [r4, #32]
 8000d5a:	f023 0304 	bic.w	r3, r3, #4
 8000d5e:	e79b      	b.n	8000c98 <HAL_RCC_OscConfig+0x2d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d62:	e7a8      	b.n	8000cb6 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d66:	e7db      	b.n	8000d20 <HAL_RCC_OscConfig+0x358>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8000d68:	4c93      	ldr	r4, [pc, #588]	; (8000fb8 <HAL_RCC_OscConfig+0x5f0>)
 8000d6a:	6863      	ldr	r3, [r4, #4]
 8000d6c:	03de      	lsls	r6, r3, #15
 8000d6e:	d508      	bpl.n	8000d82 <HAL_RCC_OscConfig+0x3ba>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8000d70:	6863      	ldr	r3, [r4, #4]
 8000d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d103      	bne.n	8000d82 <HAL_RCC_OscConfig+0x3ba>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8000d7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8000d7c:	03d8      	lsls	r0, r3, #15
 8000d7e:	f53f ae82 	bmi.w	8000a86 <HAL_RCC_OscConfig+0xbe>
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8000d82:	2a02      	cmp	r2, #2
 8000d84:	d160      	bne.n	8000e48 <HAL_RCC_OscConfig+0x480>
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	00d9      	lsls	r1, r3, #3
 8000d8a:	d506      	bpl.n	8000d9a <HAL_RCC_OscConfig+0x3d2>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8000d8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8000d8e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8000d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8000d94:	4293      	cmp	r3, r2
 8000d96:	f47f ae76 	bne.w	8000a86 <HAL_RCC_OscConfig+0xbe>
 8000d9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d9e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL2_DISABLE();
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	2200      	movs	r2, #0
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000dae:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000db2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db4:	f7ff fa62 	bl	800027c <HAL_GetTick>
 8000db8:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8000dc2:	6822      	ldr	r2, [r4, #0]
 8000dc4:	fa96 f3a6 	rbit	r3, r6
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	07da      	lsls	r2, r3, #31
 8000dd6:	d431      	bmi.n	8000e3c <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8000dd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dda:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000de0:	4313      	orrs	r3, r2
 8000de2:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8000de4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000de6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000de8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dec:	4313      	orrs	r3, r2
 8000dee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000df0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000df4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL2_ENABLE();
 8000df8:	fab3 f383 	clz	r3, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000e04:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000e08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fa37 	bl	800027c <HAL_GetTick>
 8000e0e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8000e12:	4607      	mov	r7, r0
 8000e14:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8000e18:	6822      	ldr	r2, [r4, #0]
 8000e1a:	fa96 f3a6 	rbit	r3, r6
 8000e1e:	fab3 f383 	clz	r3, r3
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	07db      	lsls	r3, r3, #31
 8000e2c:	f53f ae05 	bmi.w	8000a3a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8000e30:	f7ff fa24 	bl	800027c <HAL_GetTick>
 8000e34:	1bc0      	subs	r0, r0, r7
 8000e36:	2864      	cmp	r0, #100	; 0x64
 8000e38:	d9ec      	bls.n	8000e14 <HAL_RCC_OscConfig+0x44c>
 8000e3a:	e647      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8000e3c:	f7ff fa1e 	bl	800027c <HAL_GetTick>
 8000e40:	1bc0      	subs	r0, r0, r7
 8000e42:	2864      	cmp	r0, #100	; 0x64
 8000e44:	d9bb      	bls.n	8000dbe <HAL_RCC_OscConfig+0x3f6>
 8000e46:	e641      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8000e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e54:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL2_DISABLE();
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000e64:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000e68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fa07 	bl	800027c <HAL_GetTick>
 8000e6e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8000e72:	4607      	mov	r7, r0
 8000e74:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8000e78:	6822      	ldr	r2, [r4, #0]
 8000e7a:	fa96 f3a6 	rbit	r3, r6
 8000e7e:	fab3 f383 	clz	r3, r3
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8a:	07d8      	lsls	r0, r3, #31
 8000e8c:	f57f add5 	bpl.w	8000a3a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8000e90:	f7ff f9f4 	bl	800027c <HAL_GetTick>
 8000e94:	1bc0      	subs	r0, r0, r7
 8000e96:	2864      	cmp	r0, #100	; 0x64
 8000e98:	d9ec      	bls.n	8000e74 <HAL_RCC_OscConfig+0x4ac>
 8000e9a:	e617      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e9c:	4c46      	ldr	r4, [pc, #280]	; (8000fb8 <HAL_RCC_OscConfig+0x5f0>)
 8000e9e:	6863      	ldr	r3, [r4, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	f43f adee 	beq.w	8000a86 <HAL_RCC_OscConfig+0xbe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eaa:	2a02      	cmp	r2, #2
 8000eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb0:	d15d      	bne.n	8000f6e <HAL_RCC_OscConfig+0x5a6>
 8000eb2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	2200      	movs	r2, #0
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000ec2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000ec6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ec8:	f7ff f9d8 	bl	800027c <HAL_GetTick>
 8000ecc:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000ed0:	4607      	mov	r7, r0
 8000ed2:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ed6:	6822      	ldr	r2, [r4, #0]
 8000ed8:	fa96 f3a6 	rbit	r3, r6
 8000edc:	fab3 f383 	clz	r3, r3
 8000ee0:	f003 031f 	and.w	r3, r3, #31
 8000ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee8:	07d9      	lsls	r1, r3, #31
 8000eea:	d43a      	bmi.n	8000f62 <HAL_RCC_OscConfig+0x59a>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000eec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef2:	d109      	bne.n	8000f08 <HAL_RCC_OscConfig+0x540>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8000ef4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ef6:	6869      	ldr	r1, [r5, #4]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000efc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000efe:	68e9      	ldr	r1, [r5, #12]
 8000f00:	f022 020f 	bic.w	r2, r2, #15
 8000f04:	430a      	orrs	r2, r1
 8000f06:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f08:	6862      	ldr	r2, [r4, #4]
 8000f0a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000f0c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f10:	430b      	orrs	r3, r1
 8000f12:	4313      	orrs	r3, r2
 8000f14:	6063      	str	r3, [r4, #4]
 8000f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f1a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	2201      	movs	r2, #1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000f2a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000f2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f30:	f7ff f9a4 	bl	800027c <HAL_GetTick>
 8000f34:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000f38:	4606      	mov	r6, r0
 8000f3a:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f3e:	6822      	ldr	r2, [r4, #0]
 8000f40:	fa95 f3a5 	rbit	r3, r5
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	f003 031f 	and.w	r3, r3, #31
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	07da      	lsls	r2, r3, #31
 8000f52:	f53f ad76 	bmi.w	8000a42 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f56:	f7ff f991 	bl	800027c <HAL_GetTick>
 8000f5a:	1b80      	subs	r0, r0, r6
 8000f5c:	2802      	cmp	r0, #2
 8000f5e:	d9ec      	bls.n	8000f3a <HAL_RCC_OscConfig+0x572>
 8000f60:	e5b4      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f62:	f7ff f98b 	bl	800027c <HAL_GetTick>
 8000f66:	1bc0      	subs	r0, r0, r7
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	d9b2      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x50a>
 8000f6c:	e5ae      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
 8000f6e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	2200      	movs	r2, #0
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000f7e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000f82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f84:	f7ff f97a 	bl	800027c <HAL_GetTick>
 8000f88:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f92:	6822      	ldr	r2, [r4, #0]
 8000f94:	fa95 f3a5 	rbit	r3, r5
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	07db      	lsls	r3, r3, #31
 8000fa6:	f57f ad4c 	bpl.w	8000a42 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000faa:	f7ff f967 	bl	800027c <HAL_GetTick>
 8000fae:	1b80      	subs	r0, r0, r6
 8000fb0:	2802      	cmp	r0, #2
 8000fb2:	d9ec      	bls.n	8000f8e <HAL_RCC_OscConfig+0x5c6>
 8000fb4:	e58a      	b.n	8000acc <HAL_RCC_OscConfig+0x104>
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fbc:	b530      	push	{r4, r5, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_RCC_GetSysClockFreq+0xe0>)
{
 8000fc0:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	6859      	ldr	r1, [r3, #4]
 8000fc6:	aa01      	add	r2, sp, #4
 8000fc8:	c203      	stmia	r2!, {r0, r1}
 8000fca:	6898      	ldr	r0, [r3, #8]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 8000fcc:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 8000fce:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 8000fd0:	f103 020c 	add.w	r2, r3, #12
 8000fd4:	331c      	adds	r3, #28
 8000fd6:	462c      	mov	r4, r5
 8000fd8:	6810      	ldr	r0, [r2, #0]
 8000fda:	6851      	ldr	r1, [r2, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	c403      	stmia	r4!, {r0, r1}
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	4625      	mov	r5, r4
 8000fe4:	d1f7      	bne.n	8000fd6 <HAL_RCC_GetSysClockFreq+0x1a>
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000fe6:	4c2e      	ldr	r4, [pc, #184]	; (80010a0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8000fe8:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fea:	f000 030c 	and.w	r3, r0, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d151      	bne.n	8001096 <HAL_RCC_GetSysClockFreq+0xda>
 8000ff2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000ff6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000ffa:	fab3 f283 	clz	r2, r3
 8000ffe:	f400 1370 	and.w	r3, r0, #3932160	; 0x3c0000
 8001002:	40d3      	lsrs	r3, r2
 8001004:	aa08      	add	r2, sp, #32
 8001006:	4413      	add	r3, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001008:	03c2      	lsls	r2, r0, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 800100a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800100e:	d53f      	bpl.n	8001090 <HAL_RCC_GetSysClockFreq+0xd4>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
 8001010:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001012:	220f      	movs	r2, #15
 8001014:	fa92 f2a2 	rbit	r2, r2
 8001018:	fab2 f282 	clz	r2, r2
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	40d3      	lsrs	r3, r2
 8001022:	aa08      	add	r2, sp, #32
 8001024:	4413      	add	r3, r2
 8001026:	f813 5c10 	ldrb.w	r5, [r3, #-16]
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800102a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800102c:	03db      	lsls	r3, r3, #15
 800102e:	d52d      	bpl.n	800108c <HAL_RCC_GetSysClockFreq+0xd0>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 8001030:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001032:	20f0      	movs	r0, #240	; 0xf0
 8001034:	fa90 f0a0 	rbit	r0, r0
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 8001038:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 800103a:	fab0 f080 	clz	r0, r0
 800103e:	f44f 6470 	mov.w	r4, #3840	; 0xf00
 8001042:	fa94 f4a4 	rbit	r4, r4
 8001046:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800104a:	40c2      	lsrs	r2, r0
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 800104c:	fab4 f484 	clz	r4, r4
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <HAL_RCC_GetSysClockFreq+0xe8>)
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 8001052:	3201      	adds	r2, #1
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 8001054:	fbb0 f2f2 	udiv	r2, r0, r2
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 8001058:	f403 6070 	and.w	r0, r3, #3840	; 0xf00
 800105c:	40e0      	lsrs	r0, r4
 800105e:	3002      	adds	r0, #2
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 8001060:	4350      	muls	r0, r2
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001062:	fbb0 f0f5 	udiv	r0, r0, r5
 8001066:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800106a:	4348      	muls	r0, r1
 800106c:	fa93 f3a3 	rbit	r3, r3
        }
        
        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
 8001070:	fab3 f283 	clz	r2, r3
 8001074:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8001078:	40d3      	lsrs	r3, r2
 800107a:	aa08      	add	r2, sp, #32
 800107c:	4413      	add	r3, r2
 800107e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001082:	4299      	cmp	r1, r3
 8001084:	d100      	bne.n	8001088 <HAL_RCC_GetSysClockFreq+0xcc>
        {
            pllclk = pllclk / 2;
 8001086:	0840      	lsrs	r0, r0, #1
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001088:	b009      	add	sp, #36	; 0x24
 800108a:	bd30      	pop	{r4, r5, pc}
          pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_RCC_GetSysClockFreq+0xe8>)
 800108e:	e7e8      	b.n	8001062 <HAL_RCC_GetSysClockFreq+0xa6>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001092:	4348      	muls	r0, r1
 8001094:	e7f8      	b.n	8001088 <HAL_RCC_GetSysClockFreq+0xcc>
      sysclockfreq = HSE_VALUE;
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <HAL_RCC_GetSysClockFreq+0xe8>)
  return sysclockfreq;
 8001098:	e7f6      	b.n	8001088 <HAL_RCC_GetSysClockFreq+0xcc>
 800109a:	bf00      	nop
 800109c:	08001dc0 	.word	0x08001dc0
 80010a0:	40021000 	.word	0x40021000
 80010a4:	007a1200 	.word	0x007a1200
 80010a8:	003d0900 	.word	0x003d0900

080010ac <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ac:	4a55      	ldr	r2, [pc, #340]	; (8001204 <HAL_RCC_ClockConfig+0x158>)
{
 80010ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010b2:	6813      	ldr	r3, [r2, #0]
{
 80010b4:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	428b      	cmp	r3, r1
{
 80010bc:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010be:	d330      	bcc.n	8001122 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c0:	6832      	ldr	r2, [r6, #0]
 80010c2:	0794      	lsls	r4, r2, #30
 80010c4:	d43a      	bmi.n	800113c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c6:	07d0      	lsls	r0, r2, #31
 80010c8:	d440      	bmi.n	800114c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ca:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_RCC_ClockConfig+0x158>)
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	429d      	cmp	r5, r3
 80010d4:	f0c0 8084 	bcc.w	80011e0 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	6832      	ldr	r2, [r6, #0]
 80010da:	4c4b      	ldr	r4, [pc, #300]	; (8001208 <HAL_RCC_ClockConfig+0x15c>)
 80010dc:	f012 0f04 	tst.w	r2, #4
 80010e0:	f040 8089 	bne.w	80011f6 <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e4:	0713      	lsls	r3, r2, #28
 80010e6:	d506      	bpl.n	80010f6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010e8:	6863      	ldr	r3, [r4, #4]
 80010ea:	6932      	ldr	r2, [r6, #16]
 80010ec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010f4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010f6:	f7ff ff61 	bl	8000fbc <HAL_RCC_GetSysClockFreq>
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	22f0      	movs	r2, #240	; 0xf0
 80010fe:	fa92 f2a2 	rbit	r2, r2
 8001102:	fab2 f282 	clz	r2, r2
 8001106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800110a:	40d3      	lsrs	r3, r2
 800110c:	4a3f      	ldr	r2, [pc, #252]	; (800120c <HAL_RCC_ClockConfig+0x160>)
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	40d8      	lsrs	r0, r3
 8001112:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <HAL_RCC_ClockConfig+0x164>)
 8001114:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff f884 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 800111c:	2000      	movs	r0, #0
}
 800111e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	f023 0307 	bic.w	r3, r3, #7
 8001128:	430b      	orrs	r3, r1
 800112a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800112c:	6813      	ldr	r3, [r2, #0]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	4299      	cmp	r1, r3
 8001134:	d0c4      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
 8001138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	4932      	ldr	r1, [pc, #200]	; (8001208 <HAL_RCC_ClockConfig+0x15c>)
 800113e:	68b0      	ldr	r0, [r6, #8]
 8001140:	684b      	ldr	r3, [r1, #4]
 8001142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001146:	4303      	orrs	r3, r0
 8001148:	604b      	str	r3, [r1, #4]
 800114a:	e7bc      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800114c:	6872      	ldr	r2, [r6, #4]
 800114e:	4c2e      	ldr	r4, [pc, #184]	; (8001208 <HAL_RCC_ClockConfig+0x15c>)
 8001150:	2a01      	cmp	r2, #1
 8001152:	d128      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xfa>
 8001154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001158:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115c:	6821      	ldr	r1, [r4, #0]
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	f003 031f 	and.w	r3, r3, #31
 800116a:	fa21 f303 	lsr.w	r3, r1, r3
 800116e:	07d9      	lsls	r1, r3, #31
 8001170:	d5e1      	bpl.n	8001136 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001172:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001174:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001178:	f023 0303 	bic.w	r3, r3, #3
 800117c:	431a      	orrs	r2, r3
 800117e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001180:	f7ff f87c 	bl	800027c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001184:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001186:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001188:	2b01      	cmp	r3, #1
 800118a:	d112      	bne.n	80011b2 <HAL_RCC_ClockConfig+0x106>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b04      	cmp	r3, #4
 8001194:	d099      	beq.n	80010ca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001196:	f7ff f871 	bl	800027c <HAL_GetTick>
 800119a:	1bc0      	subs	r0, r0, r7
 800119c:	4540      	cmp	r0, r8
 800119e:	d9f5      	bls.n	800118c <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 80011a0:	2003      	movs	r0, #3
 80011a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011a6:	2a02      	cmp	r2, #2
 80011a8:	bf0c      	ite	eq
 80011aa:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80011ae:	2302      	movne	r3, #2
 80011b0:	e7d2      	b.n	8001158 <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d10f      	bne.n	80011d6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b6:	6863      	ldr	r3, [r4, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d084      	beq.n	80010ca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c0:	f7ff f85c 	bl	800027c <HAL_GetTick>
 80011c4:	1bc0      	subs	r0, r0, r7
 80011c6:	4540      	cmp	r0, r8
 80011c8:	d9f5      	bls.n	80011b6 <HAL_RCC_ClockConfig+0x10a>
 80011ca:	e7e9      	b.n	80011a0 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011cc:	f7ff f856 	bl	800027c <HAL_GetTick>
 80011d0:	1bc0      	subs	r0, r0, r7
 80011d2:	4540      	cmp	r0, r8
 80011d4:	d8e4      	bhi.n	80011a0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d6:	6863      	ldr	r3, [r4, #4]
 80011d8:	f013 0f0c 	tst.w	r3, #12
 80011dc:	d1f6      	bne.n	80011cc <HAL_RCC_ClockConfig+0x120>
 80011de:	e774      	b.n	80010ca <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	f023 0307 	bic.w	r3, r3, #7
 80011e6:	432b      	orrs	r3, r5
 80011e8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	429d      	cmp	r5, r3
 80011f2:	d1a0      	bne.n	8001136 <HAL_RCC_ClockConfig+0x8a>
 80011f4:	e770      	b.n	80010d8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f6:	6863      	ldr	r3, [r4, #4]
 80011f8:	68f1      	ldr	r1, [r6, #12]
 80011fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011fe:	430b      	orrs	r3, r1
 8001200:	6063      	str	r3, [r4, #4]
 8001202:	e76f      	b.n	80010e4 <HAL_RCC_ClockConfig+0x38>
 8001204:	40022000 	.word	0x40022000
 8001208:	40021000 	.word	0x40021000
 800120c:	08001ddc 	.word	0x08001ddc
 8001210:	20000000 	.word	0x20000000

08001214 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001214:	4b01      	ldr	r3, [pc, #4]	; (800121c <HAL_RCC_GetHCLKFreq+0x8>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000000 	.word	0x20000000

08001220 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001222:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	fa92 f2a2 	rbit	r2, r2
 800122c:	fab2 f282 	clz	r2, r2
 8001230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001234:	40d3      	lsrs	r3, r2
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800123c:	6810      	ldr	r0, [r2, #0]
}    
 800123e:	40d8      	lsrs	r0, r3
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	08001dec 	.word	0x08001dec
 800124c:	20000000 	.word	0x20000000

08001250 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001252:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	fa92 f2a2 	rbit	r2, r2
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001264:	40d3      	lsrs	r3, r2
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800126c:	6810      	ldr	r0, [r2, #0]
} 
 800126e:	40d8      	lsrs	r0, r3
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	08001dec 	.word	0x08001dec
 800127c:	20000000 	.word	0x20000000

08001280 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001284:	6805      	ldr	r5, [r0, #0]
 8001286:	68c2      	ldr	r2, [r0, #12]
 8001288:	692b      	ldr	r3, [r5, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 800128a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800128c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001290:	4313      	orrs	r3, r2
 8001292:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8001294:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001296:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8001298:	430b      	orrs	r3, r1
 800129a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800129c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80012a0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80012a4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012aa:	696b      	ldr	r3, [r5, #20]
 80012ac:	6982      	ldr	r2, [r0, #24]
 80012ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012b2:	4313      	orrs	r3, r2
 80012b4:	616b      	str	r3, [r5, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80012b6:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <UART_SetConfig+0x138>)
{
 80012b8:	4681      	mov	r9, r0
  if((huart->Instance == USART1))
 80012ba:	429d      	cmp	r5, r3
 80012bc:	f04f 0419 	mov.w	r4, #25
 80012c0:	d146      	bne.n	8001350 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012c2:	f7ff ffc5 	bl	8001250 <HAL_RCC_GetPCLK2Freq>
 80012c6:	fb04 f300 	mul.w	r3, r4, r0
 80012ca:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80012ce:	f04f 0864 	mov.w	r8, #100	; 0x64
 80012d2:	00b6      	lsls	r6, r6, #2
 80012d4:	fbb3 f3f6 	udiv	r3, r3, r6
 80012d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80012dc:	011e      	lsls	r6, r3, #4
 80012de:	f7ff ffb7 	bl	8001250 <HAL_RCC_GetPCLK2Freq>
 80012e2:	4360      	muls	r0, r4
 80012e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	fbb0 f7f3 	udiv	r7, r0, r3
 80012ee:	f7ff ffaf 	bl	8001250 <HAL_RCC_GetPCLK2Freq>
 80012f2:	4360      	muls	r0, r4
 80012f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fe:	fbb3 f3f8 	udiv	r3, r3, r8
 8001302:	fb08 7313 	mls	r3, r8, r3, r7
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	3332      	adds	r3, #50	; 0x32
 800130a:	fbb3 f3f8 	udiv	r3, r3, r8
 800130e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001312:	f7ff ff9d 	bl	8001250 <HAL_RCC_GetPCLK2Freq>
 8001316:	4360      	muls	r0, r4
 8001318:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	fbb0 faf2 	udiv	sl, r0, r2
 8001322:	f7ff ff95 	bl	8001250 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001326:	4360      	muls	r0, r4
 8001328:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001332:	fbb3 f3f8 	udiv	r3, r3, r8
 8001336:	fb08 a313 	mls	r3, r8, r3, sl
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	3332      	adds	r3, #50	; 0x32
 800133e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	433b      	orrs	r3, r7
 8001348:	4433      	add	r3, r6
 800134a:	60ab      	str	r3, [r5, #8]
 800134c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001350:	f7ff ff66 	bl	8001220 <HAL_RCC_GetPCLK1Freq>
 8001354:	fb04 f300 	mul.w	r3, r4, r0
 8001358:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800135c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001360:	00b6      	lsls	r6, r6, #2
 8001362:	fbb3 f3f6 	udiv	r3, r3, r6
 8001366:	fbb3 f3f8 	udiv	r3, r3, r8
 800136a:	011e      	lsls	r6, r3, #4
 800136c:	f7ff ff58 	bl	8001220 <HAL_RCC_GetPCLK1Freq>
 8001370:	4360      	muls	r0, r4
 8001372:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fbb0 f7f3 	udiv	r7, r0, r3
 800137c:	f7ff ff50 	bl	8001220 <HAL_RCC_GetPCLK1Freq>
 8001380:	4360      	muls	r0, r4
 8001382:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	fbb0 f3f3 	udiv	r3, r0, r3
 800138c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001390:	fb08 7313 	mls	r3, r8, r3, r7
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	3332      	adds	r3, #50	; 0x32
 8001398:	fbb3 f3f8 	udiv	r3, r3, r8
 800139c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80013a0:	f7ff ff3e 	bl	8001220 <HAL_RCC_GetPCLK1Freq>
 80013a4:	4360      	muls	r0, r4
 80013a6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	fbb0 faf2 	udiv	sl, r0, r2
 80013b0:	f7ff ff36 	bl	8001220 <HAL_RCC_GetPCLK1Freq>
 80013b4:	e7b7      	b.n	8001326 <UART_SetConfig+0xa6>
 80013b6:	bf00      	nop
 80013b8:	40013800 	.word	0x40013800

080013bc <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	4604      	mov	r4, r0
 80013c0:	460e      	mov	r6, r1
 80013c2:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80013c4:	f7fe ff5a 	bl	800027c <HAL_GetTick>
 80013c8:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	6813      	ldr	r3, [r2, #0]
 80013ce:	ea36 0303 	bics.w	r3, r6, r3
 80013d2:	d101      	bne.n	80013d8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 80013d4:	2000      	movs	r0, #0
}
 80013d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 80013d8:	1c6b      	adds	r3, r5, #1
 80013da:	d0f7      	beq.n	80013cc <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80013dc:	b9c5      	cbnz	r5, 8001410 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013de:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 80013e0:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013e8:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	f022 0220 	bic.w	r2, r2, #32
 80013f0:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013f8:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	f022 0201 	bic.w	r2, r2, #1
 8001400:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 8001402:	2301      	movs	r3, #1
 8001404:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8001408:	2300      	movs	r3, #0
 800140a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800140e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001410:	f7fe ff34 	bl	800027c <HAL_GetTick>
 8001414:	1bc0      	subs	r0, r0, r7
 8001416:	4285      	cmp	r5, r0
 8001418:	d2d7      	bcs.n	80013ca <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 800141a:	e7e0      	b.n	80013de <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

0800141c <HAL_UART_Init>:
{
 800141c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800141e:	4604      	mov	r4, r0
 8001420:	b330      	cbz	r0, 8001470 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8001422:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001426:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800142a:	b91b      	cbnz	r3, 8001434 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800142c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001430:	f000 fc22 	bl	8001c78 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001434:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001436:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001438:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800143c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800143e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001444:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001446:	f7ff ff1b 	bl	8001280 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800144a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800144c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800145c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001464:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8001466:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001468:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800146a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800146e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001470:	2001      	movs	r0, #1
}
 8001472:	bd10      	pop	{r4, pc}

08001474 <HAL_UART_Transmit>:
{
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8001478:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 800147c:	4604      	mov	r4, r0
  tmp_state = huart->State;
 800147e:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001480:	2901      	cmp	r1, #1
{
 8001482:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001484:	d001      	beq.n	800148a <HAL_UART_Transmit+0x16>
 8001486:	2922      	cmp	r1, #34	; 0x22
 8001488:	d14d      	bne.n	8001526 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 800148a:	2d00      	cmp	r5, #0
 800148c:	d049      	beq.n	8001522 <HAL_UART_Transmit+0xae>
 800148e:	2a00      	cmp	r2, #0
 8001490:	d047      	beq.n	8001522 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001492:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001496:	2b01      	cmp	r3, #1
 8001498:	d045      	beq.n	8001526 <HAL_UART_Transmit+0xb2>
 800149a:	2301      	movs	r3, #1
 800149c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80014a4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 80014a8:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80014aa:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80014ac:	bf0c      	ite	eq
 80014ae:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 80014b0:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 80014b2:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 80014b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 80014b8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80014ba:	b98a      	cbnz	r2, 80014e0 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80014bc:	4632      	mov	r2, r6
 80014be:	2140      	movs	r1, #64	; 0x40
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff ff7b 	bl	80013bc <UART_WaitOnFlagUntilTimeout.constprop.1>
 80014c6:	b9c0      	cbnz	r0, 80014fa <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80014c8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80014cc:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80014ce:	bf0c      	ite	eq
 80014d0:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 80014d2:	2301      	movne	r3, #1
 80014d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80014d8:	2300      	movs	r3, #0
 80014da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 80014de:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014e0:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 80014e2:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 80014e8:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80014ea:	f04f 0180 	mov.w	r1, #128	; 0x80
 80014ee:	4632      	mov	r2, r6
 80014f0:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014f2:	d10d      	bne.n	8001510 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80014f4:	f7ff ff62 	bl	80013bc <UART_WaitOnFlagUntilTimeout.constprop.1>
 80014f8:	b108      	cbz	r0, 80014fe <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80014fa:	2003      	movs	r0, #3
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80014fe:	882b      	ldrh	r3, [r5, #0]
 8001500:	6822      	ldr	r2, [r4, #0]
 8001502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001506:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001508:	6923      	ldr	r3, [r4, #16]
 800150a:	b943      	cbnz	r3, 800151e <HAL_UART_Transmit+0xaa>
          pData +=2;
 800150c:	3502      	adds	r5, #2
 800150e:	e7d3      	b.n	80014b8 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001510:	f7ff ff54 	bl	80013bc <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001514:	2800      	cmp	r0, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	782a      	ldrb	r2, [r5, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	3501      	adds	r5, #1
 8001520:	e7ca      	b.n	80014b8 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8001522:	2001      	movs	r0, #1
 8001524:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001526:	2002      	movs	r0, #2
}
 8001528:	bd70      	pop	{r4, r5, r6, pc}

0800152a <Rx_BBOX_power_Data>:
}
#endif
#ifdef Rx_BBOX_power
void Rx_BBOX_power_Data(CAN_HandleTypeDef* hcan, BBOX_power_TypeDef* BBOX_power_Data)
{
    BBOX_power_Data->power = (int16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 800152a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800152c:	7d18      	ldrb	r0, [r3, #20]
 800152e:	7d5a      	ldrb	r2, [r3, #21]
 8001530:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001534:	800a      	strh	r2, [r1, #0]
    BBOX_power_Data->current = (int16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 8001536:	7d98      	ldrb	r0, [r3, #22]
 8001538:	7dda      	ldrb	r2, [r3, #23]
 800153a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800153e:	804a      	strh	r2, [r1, #2]
    BBOX_power_Data->voltage = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 8001540:	7e1a      	ldrb	r2, [r3, #24]
 8001542:	7e5b      	ldrb	r3, [r3, #25]
 8001544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001548:	808b      	strh	r3, [r1, #4]
 800154a:	4770      	bx	lr

0800154c <Rx_wheel_RPM_Data>:
}
#endif
#ifdef Rx_wheel_RPM
void Rx_wheel_RPM_Data(CAN_HandleTypeDef* hcan, wheel_RPM_TypeDef* wheel_RPM_Data)
{
    wheel_RPM_Data->front_right = (uint16_t)(((hcan->pRxMsg->Data[0]&0b11111111) << 8) | (hcan->pRxMsg->Data[1]&0b1111111111111111));
 800154c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800154e:	7d18      	ldrb	r0, [r3, #20]
 8001550:	7d5a      	ldrb	r2, [r3, #21]
 8001552:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001556:	800a      	strh	r2, [r1, #0]
    wheel_RPM_Data->front_left = (uint16_t)(((hcan->pRxMsg->Data[2]&0b11111111) << 8) | (hcan->pRxMsg->Data[3]&0b1111111111111111));
 8001558:	7d98      	ldrb	r0, [r3, #22]
 800155a:	7dda      	ldrb	r2, [r3, #23]
 800155c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001560:	804a      	strh	r2, [r1, #2]
    wheel_RPM_Data->rear_left = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 8001562:	7e18      	ldrb	r0, [r3, #24]
 8001564:	7e5a      	ldrb	r2, [r3, #25]
 8001566:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800156a:	808a      	strh	r2, [r1, #4]
    wheel_RPM_Data->rear_right = (uint16_t)(((hcan->pRxMsg->Data[6]&0b11111111) << 8) | (hcan->pRxMsg->Data[7]&0b1111111111111111));
 800156c:	7e9a      	ldrb	r2, [r3, #26]
 800156e:	7edb      	ldrb	r3, [r3, #27]
 8001570:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001574:	80cb      	strh	r3, [r1, #6]
 8001576:	4770      	bx	lr

08001578 <Rx_BBOX_status_Data>:
}
#endif
#ifdef Rx_BBOX_status
void Rx_BBOX_status_Data(CAN_HandleTypeDef* hcan, BBOX_status_TypeDef* BBOX_status_Data)
{
    BBOX_status_Data->TSMS = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11111111) >> 7));
 8001578:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800157a:	7d13      	ldrb	r3, [r2, #20]
 800157c:	09d8      	lsrs	r0, r3, #7
 800157e:	7008      	strb	r0, [r1, #0]
    BBOX_status_Data->SHD_IN = (uint8_t)(((hcan->pRxMsg->Data[0]&0b1111111) >> 6));
 8001580:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8001584:	7048      	strb	r0, [r1, #1]
    BBOX_status_Data->SHD_OUT = (uint8_t)(((hcan->pRxMsg->Data[0]&0b111111) >> 5));
 8001586:	f3c3 1040 	ubfx	r0, r3, #5, #1
 800158a:	7088      	strb	r0, [r1, #2]
    BBOX_status_Data->AIR_N = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11111) >> 4));
 800158c:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8001590:	70c8      	strb	r0, [r1, #3]
    BBOX_status_Data->AIR_P = (uint8_t)(((hcan->pRxMsg->Data[0]&0b1111) >> 3));
 8001592:	f3c3 00c0 	ubfx	r0, r3, #3, #1
 8001596:	7108      	strb	r0, [r1, #4]
    BBOX_status_Data->PRECH_60V = (uint8_t)(((hcan->pRxMsg->Data[0]&0b111) >> 2));
 8001598:	f3c3 0080 	ubfx	r0, r3, #2, #1
 800159c:	7148      	strb	r0, [r1, #5]
    BBOX_status_Data->IMD_OK = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11) >> 1));
 800159e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    BBOX_status_Data->BMS_OK = (uint8_t)((hcan->pRxMsg->Data[0]&0b1));
 80015a2:	f003 0301 	and.w	r3, r3, #1
    BBOX_status_Data->IMD_OK = (uint8_t)(((hcan->pRxMsg->Data[0]&0b11) >> 1));
 80015a6:	7188      	strb	r0, [r1, #6]
    BBOX_status_Data->BMS_OK = (uint8_t)((hcan->pRxMsg->Data[0]&0b1));
 80015a8:	71cb      	strb	r3, [r1, #7]
    BBOX_status_Data->SIGNAL_ERROR = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11111111) >> 7));
 80015aa:	7d53      	ldrb	r3, [r2, #21]
 80015ac:	09d8      	lsrs	r0, r3, #7
 80015ae:	7208      	strb	r0, [r1, #8]
    BBOX_status_Data->SHD_RESET = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1111111) >> 6));
 80015b0:	f3c3 1080 	ubfx	r0, r3, #6, #1
 80015b4:	7248      	strb	r0, [r1, #9]
    BBOX_status_Data->SHD_EN = (uint8_t)(((hcan->pRxMsg->Data[1]&0b111111) >> 5));
 80015b6:	f3c3 1040 	ubfx	r0, r3, #5, #1
 80015ba:	7288      	strb	r0, [r1, #10]
    BBOX_status_Data->POLARITY = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11111) >> 4));
 80015bc:	f3c3 1000 	ubfx	r0, r3, #4, #1
 80015c0:	72c8      	strb	r0, [r1, #11]
    BBOX_status_Data->FANS = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1111) >> 3));
 80015c2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
 80015c6:	7308      	strb	r0, [r1, #12]
    BBOX_status_Data->STM_temp = (int8_t)(((hcan->pRxMsg->Data[1]&0b111) << 5) | ((hcan->pRxMsg->Data[2]&0b11111111111) >> 3));
 80015c8:	7d92      	ldrb	r2, [r2, #22]
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80015d0:	734b      	strb	r3, [r1, #13]
 80015d2:	4770      	bx	lr

080015d4 <Rx_FU_Values_1_Data>:
}
#endif
#ifdef Rx_FU_Values_1
void Rx_FU_Values_1_Data(CAN_HandleTypeDef* hcan, FU_Values_1_TypeDef* FU_Values_1_Data)
{
    FU_Values_1_Data->apps1 = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 80015d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015d6:	7d1a      	ldrb	r2, [r3, #20]
 80015d8:	700a      	strb	r2, [r1, #0]
    FU_Values_1_Data->apps2 = (uint8_t)((hcan->pRxMsg->Data[1]&0b11111111));
 80015da:	7d5a      	ldrb	r2, [r3, #21]
 80015dc:	704a      	strb	r2, [r1, #1]
    FU_Values_1_Data->brake1 = (uint8_t)((hcan->pRxMsg->Data[2]&0b11111111));
 80015de:	7d9a      	ldrb	r2, [r3, #22]
 80015e0:	708a      	strb	r2, [r1, #2]
    FU_Values_1_Data->brake2 = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 80015e2:	7dda      	ldrb	r2, [r3, #23]
 80015e4:	70ca      	strb	r2, [r1, #3]
    FU_Values_1_Data->error = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111111) << 8) | (hcan->pRxMsg->Data[5]&0b1111111111111111));
 80015e6:	7e1a      	ldrb	r2, [r3, #24]
 80015e8:	7e5b      	ldrb	r3, [r3, #25]
 80015ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015ee:	808b      	strh	r3, [r1, #4]
 80015f0:	4770      	bx	lr

080015f2 <Rx_BMS_State_Data>:
}
#endif
#ifdef Rx_BMS_State
void Rx_BMS_State_Data(CAN_HandleTypeDef* hcan, BMS_State_TypeDef* BMS_State_Data)
{
    BMS_State_Data->BMS_Mode = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 80015f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015f4:	7d1a      	ldrb	r2, [r3, #20]
 80015f6:	700a      	strb	r2, [r1, #0]
    BMS_State_Data->BMS_Faults = (uint16_t)(((hcan->pRxMsg->Data[1]&0b11111111) << 8) | (hcan->pRxMsg->Data[2]&0b1111111111111111));
 80015f8:	7d58      	ldrb	r0, [r3, #21]
 80015fa:	7d9a      	ldrb	r2, [r3, #22]
 80015fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001600:	804a      	strh	r2, [r1, #2]
    BMS_State_Data->CellVolt_L = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 8001602:	7dda      	ldrb	r2, [r3, #23]
 8001604:	710a      	strb	r2, [r1, #4]
    BMS_State_Data->CellVolt_H = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 8001606:	7e1a      	ldrb	r2, [r3, #24]
 8001608:	714a      	strb	r2, [r1, #5]
    BMS_State_Data->CellTemp_L = (uint8_t)((hcan->pRxMsg->Data[5]&0b11111111));
 800160a:	7e5a      	ldrb	r2, [r3, #25]
 800160c:	718a      	strb	r2, [r1, #6]
    BMS_State_Data->CellTemp_H = (uint8_t)((hcan->pRxMsg->Data[6]&0b11111111));
 800160e:	7e9a      	ldrb	r2, [r3, #26]
 8001610:	71ca      	strb	r2, [r1, #7]
    BMS_State_Data->BMS_Ident = (uint8_t)((hcan->pRxMsg->Data[7]&0b11111111));
 8001612:	7edb      	ldrb	r3, [r3, #27]
 8001614:	720b      	strb	r3, [r1, #8]
 8001616:	4770      	bx	lr

08001618 <Rx_ECU_State_Data>:
}
#endif
#ifdef Rx_ECU_State
void Rx_ECU_State_Data(CAN_HandleTypeDef* hcan, ECU_State_TypeDef* ECU_State_Data)
{
    ECU_State_Data->ECU_Status = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 8001618:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800161a:	7d1a      	ldrb	r2, [r3, #20]
 800161c:	700a      	strb	r2, [r1, #0]
    ECU_State_Data->FL_AMK_Status = (uint8_t)((hcan->pRxMsg->Data[1]&0b11111111));
 800161e:	7d5a      	ldrb	r2, [r3, #21]
 8001620:	704a      	strb	r2, [r1, #1]
    ECU_State_Data->FR_AMK_Status = (uint8_t)((hcan->pRxMsg->Data[2]&0b11111111));
 8001622:	7d9a      	ldrb	r2, [r3, #22]
 8001624:	708a      	strb	r2, [r1, #2]
    ECU_State_Data->RL_AMK_Status = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 8001626:	7dda      	ldrb	r2, [r3, #23]
 8001628:	70ca      	strb	r2, [r1, #3]
    ECU_State_Data->RR_AMK_Status = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 800162a:	7e1a      	ldrb	r2, [r3, #24]
 800162c:	710a      	strb	r2, [r1, #4]
    ECU_State_Data->TempMotor_H = (uint8_t)((hcan->pRxMsg->Data[5]&0b11111111));
 800162e:	7e5a      	ldrb	r2, [r3, #25]
 8001630:	714a      	strb	r2, [r1, #5]
    ECU_State_Data->TempInverter_H = (uint8_t)((hcan->pRxMsg->Data[6]&0b11111111));
 8001632:	7e9a      	ldrb	r2, [r3, #26]
 8001634:	718a      	strb	r2, [r1, #6]
    ECU_State_Data->TempIGBT_H = (uint8_t)((hcan->pRxMsg->Data[7]&0b11111111));
 8001636:	7edb      	ldrb	r3, [r3, #27]
 8001638:	71cb      	strb	r3, [r1, #7]
 800163a:	4770      	bx	lr

0800163c <Rx_FU_Values_2_Data>:
    HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
}
#endif
#ifdef Rx_FU_Values_2
void Rx_FU_Values_2_Data(CAN_HandleTypeDef* hcan, FU_Values_2_TypeDef* FU_Values_2_Data)
{
 800163c:	b510      	push	{r4, lr}
    FU_Values_2_Data->steer = (int8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 800163e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001640:	7d13      	ldrb	r3, [r2, #20]
 8001642:	700b      	strb	r3, [r1, #0]
    FU_Values_2_Data->susp_FL = (uint16_t)(((hcan->pRxMsg->Data[1]&0b11111111) << 4) | ((hcan->pRxMsg->Data[2]&0b1111111111111111) >> 4));
 8001644:	7d93      	ldrb	r3, [r2, #22]
 8001646:	7d54      	ldrb	r4, [r2, #21]
 8001648:	1118      	asrs	r0, r3, #4
 800164a:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
 800164e:	8048      	strh	r0, [r1, #2]
    FU_Values_2_Data->susp_FR = (uint16_t)(((hcan->pRxMsg->Data[2]&0b1111) << 8) | (hcan->pRxMsg->Data[3]&0b111111111111));
 8001650:	7dd0      	ldrb	r0, [r2, #23]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001658:	4303      	orrs	r3, r0
 800165a:	808b      	strh	r3, [r1, #4]
    FU_Values_2_Data->brake_pos = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 800165c:	7e13      	ldrb	r3, [r2, #24]
 800165e:	718b      	strb	r3, [r1, #6]
    FU_Values_2_Data->RTD = (uint8_t)(((hcan->pRxMsg->Data[5]&0b11111111) >> 7));
 8001660:	7e53      	ldrb	r3, [r2, #25]
 8001662:	09d8      	lsrs	r0, r3, #7
 8001664:	71c8      	strb	r0, [r1, #7]
    FU_Values_2_Data->BOTS = (uint8_t)(((hcan->pRxMsg->Data[5]&0b1111111) >> 6));
 8001666:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800166a:	7208      	strb	r0, [r1, #8]
    FU_Values_2_Data->SHDB = (uint8_t)(((hcan->pRxMsg->Data[5]&0b111111) >> 5));
 800166c:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8001670:	7248      	strb	r0, [r1, #9]
    FU_Values_2_Data->INERTIA_SW = (uint8_t)(((hcan->pRxMsg->Data[5]&0b11111) >> 4));
 8001672:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8001676:	7288      	strb	r0, [r1, #10]
    FU_Values_2_Data->reserve = (uint8_t)(((hcan->pRxMsg->Data[5]&0b1111) << 4) | ((hcan->pRxMsg->Data[6]&0b111111111111) >> 4));
 8001678:	7e92      	ldrb	r2, [r2, #26]
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001680:	72cb      	strb	r3, [r1, #11]
 8001682:	bd10      	pop	{r4, pc}

08001684 <Rx_Interconnect_Data>:
    HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
}
#endif
#ifdef Rx_Interconnect
void Rx_Interconnect_Data(CAN_HandleTypeDef* hcan, Interconnect_TypeDef* Interconnect_Data)
{
 8001684:	b530      	push	{r4, r5, lr}
    Interconnect_Data->car_state = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 8001686:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001688:	7d13      	ldrb	r3, [r2, #20]
 800168a:	700b      	strb	r3, [r1, #0]
    Interconnect_Data->left_w_pump = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11111111) >> 7));
 800168c:	7d53      	ldrb	r3, [r2, #21]
 800168e:	09d8      	lsrs	r0, r3, #7
 8001690:	7048      	strb	r0, [r1, #1]
    Interconnect_Data->right_w_pump = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1111111) >> 6));
 8001692:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8001696:	7088      	strb	r0, [r1, #2]
    Interconnect_Data->brake_red = (uint8_t)(((hcan->pRxMsg->Data[1]&0b111111) >> 5));
 8001698:	f3c3 1040 	ubfx	r0, r3, #5, #1
 800169c:	70c8      	strb	r0, [r1, #3]
    Interconnect_Data->brake_white = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11111) >> 4));
 800169e:	f3c3 1000 	ubfx	r0, r3, #4, #1
 80016a2:	7108      	strb	r0, [r1, #4]
    Interconnect_Data->tsas = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1111) >> 3));
 80016a4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
 80016a8:	7148      	strb	r0, [r1, #5]
    Interconnect_Data->killswitch_R = (uint8_t)(((hcan->pRxMsg->Data[1]&0b111) >> 2));
 80016aa:	f3c3 0080 	ubfx	r0, r3, #2, #1
 80016ae:	7188      	strb	r0, [r1, #6]
    Interconnect_Data->killswitch_L = (uint8_t)(((hcan->pRxMsg->Data[1]&0b11) >> 1));
 80016b0:	f3c3 0040 	ubfx	r0, r3, #1, #1
 80016b4:	71c8      	strb	r0, [r1, #7]
    Interconnect_Data->reserve = (uint8_t)(((hcan->pRxMsg->Data[1]&0b1) << 7) | ((hcan->pRxMsg->Data[2]&0b111111111) >> 1));
 80016b6:	7d90      	ldrb	r0, [r2, #22]
 80016b8:	1044      	asrs	r4, r0, #1
 80016ba:	ea44 13c3 	orr.w	r3, r4, r3, lsl #7
 80016be:	720b      	strb	r3, [r1, #8]
    Interconnect_Data->susp_RR = (uint16_t)(((hcan->pRxMsg->Data[2]&0b1) << 11) | ((hcan->pRxMsg->Data[3]&0b111111111) << 3) | ((hcan->pRxMsg->Data[4]&0b11111111111111111) >> 5));
 80016c0:	7e13      	ldrb	r3, [r2, #24]
 80016c2:	7dd5      	ldrb	r5, [r2, #23]
 80016c4:	115c      	asrs	r4, r3, #5
 80016c6:	02c0      	lsls	r0, r0, #11
 80016c8:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 80016cc:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80016d0:	4320      	orrs	r0, r4
 80016d2:	8148      	strh	r0, [r1, #10]
    Interconnect_Data->susp_RL = (uint16_t)(((hcan->pRxMsg->Data[4]&0b11111) << 7) | ((hcan->pRxMsg->Data[5]&0b1111111111111) >> 1));
 80016d4:	7e52      	ldrb	r2, [r2, #25]
 80016d6:	01db      	lsls	r3, r3, #7
 80016d8:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 80016dc:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80016e0:	818b      	strh	r3, [r1, #12]
 80016e2:	bd30      	pop	{r4, r5, pc}

080016e4 <Rx_BMS_Voltages_Data>:
}
#endif
#ifdef Rx_BMS_Voltages
void Rx_BMS_Voltages_Data(CAN_HandleTypeDef* hcan, BMS_Voltages_TypeDef* BMS_Voltages_Data)
{
    BMS_Voltages_Data->BMS_VoltIdent = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 80016e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016e6:	7d1a      	ldrb	r2, [r3, #20]
 80016e8:	700a      	strb	r2, [r1, #0]
    BMS_Voltages_Data->BMS_Volt1 = (uint8_t)((hcan->pRxMsg->Data[1]&0b11111111));
 80016ea:	7d5a      	ldrb	r2, [r3, #21]
 80016ec:	704a      	strb	r2, [r1, #1]
    BMS_Voltages_Data->BMS_Volt2 = (uint8_t)((hcan->pRxMsg->Data[2]&0b11111111));
 80016ee:	7d9a      	ldrb	r2, [r3, #22]
 80016f0:	708a      	strb	r2, [r1, #2]
    BMS_Voltages_Data->BMS_Volt3 = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 80016f2:	7dda      	ldrb	r2, [r3, #23]
 80016f4:	70ca      	strb	r2, [r1, #3]
    BMS_Voltages_Data->BMS_Volt4 = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 80016f6:	7e1a      	ldrb	r2, [r3, #24]
 80016f8:	710a      	strb	r2, [r1, #4]
    BMS_Voltages_Data->BMS_Volt5 = (uint8_t)((hcan->pRxMsg->Data[5]&0b11111111));
 80016fa:	7e5a      	ldrb	r2, [r3, #25]
 80016fc:	714a      	strb	r2, [r1, #5]
    BMS_Voltages_Data->BMS_Volt6 = (uint8_t)((hcan->pRxMsg->Data[6]&0b11111111));
 80016fe:	7e9a      	ldrb	r2, [r3, #26]
 8001700:	718a      	strb	r2, [r1, #6]
    BMS_Voltages_Data->BMS_Volt7 = (uint8_t)((hcan->pRxMsg->Data[7]&0b11111111));
 8001702:	7edb      	ldrb	r3, [r3, #27]
 8001704:	71cb      	strb	r3, [r1, #7]
 8001706:	4770      	bx	lr

08001708 <Rx_BMS_Temps_Data>:
}
#endif
#ifdef Rx_BMS_Temps
void Rx_BMS_Temps_Data(CAN_HandleTypeDef* hcan, BMS_Temps_TypeDef* BMS_Temps_Data)
{
    BMS_Temps_Data->BMS_TempIdent = (uint8_t)((hcan->pRxMsg->Data[0]&0b11111111));
 8001708:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800170a:	7d1a      	ldrb	r2, [r3, #20]
 800170c:	700a      	strb	r2, [r1, #0]
    BMS_Temps_Data->BMS_Temp1 = (uint8_t)((hcan->pRxMsg->Data[1]&0b11111111));
 800170e:	7d5a      	ldrb	r2, [r3, #21]
 8001710:	704a      	strb	r2, [r1, #1]
    BMS_Temps_Data->BMS_Temp2 = (uint8_t)((hcan->pRxMsg->Data[2]&0b11111111));
 8001712:	7d9a      	ldrb	r2, [r3, #22]
 8001714:	708a      	strb	r2, [r1, #2]
    BMS_Temps_Data->BMS_Temp3 = (uint8_t)((hcan->pRxMsg->Data[3]&0b11111111));
 8001716:	7dda      	ldrb	r2, [r3, #23]
 8001718:	70ca      	strb	r2, [r1, #3]
    BMS_Temps_Data->BMS_Temp4 = (uint8_t)((hcan->pRxMsg->Data[4]&0b11111111));
 800171a:	7e1a      	ldrb	r2, [r3, #24]
 800171c:	710a      	strb	r2, [r1, #4]
    BMS_Temps_Data->BMS_Temp5 = (uint8_t)((hcan->pRxMsg->Data[5]&0b11111111));
 800171e:	7e5a      	ldrb	r2, [r3, #25]
 8001720:	714a      	strb	r2, [r1, #5]
    BMS_Temps_Data->BMS_Temp6 = (uint8_t)((hcan->pRxMsg->Data[6]&0b11111111));
 8001722:	7e9a      	ldrb	r2, [r3, #26]
 8001724:	718a      	strb	r2, [r1, #6]
    BMS_Temps_Data->BMS_Temp7 = (uint8_t)((hcan->pRxMsg->Data[7]&0b11111111));
 8001726:	7edb      	ldrb	r3, [r3, #27]
 8001728:	71cb      	strb	r3, [r1, #7]
 800172a:	4770      	bx	lr

0800172c <HAL_CAN_ErrorCallback>:
 * \return void
 *
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800172c:	2300      	movs	r3, #0
    hcan->Instance->MSR &= 0x1C;
 800172e:	6802      	ldr	r2, [r0, #0]
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001730:	63c3      	str	r3, [r0, #60]	; 0x3c
    hcan->Instance->MSR &= 0x1C;
 8001732:	6853      	ldr	r3, [r2, #4]
 8001734:	f003 031c 	and.w	r3, r3, #28
 8001738:	6053      	str	r3, [r2, #4]
 800173a:	4770      	bx	lr

0800173c <HAL_CAN_RxCpltCallback>:
* @brief Event for CAN Rx message
* @param Can controller message structure
*/
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
    switch (hcan->pRxMsg->StdId)
 800173c:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 800173e:	b510      	push	{r4, lr}
    switch (hcan->pRxMsg->StdId)
 8001740:	681b      	ldr	r3, [r3, #0]
{
 8001742:	4604      	mov	r4, r0
    switch (hcan->pRxMsg->StdId)
 8001744:	2b50      	cmp	r3, #80	; 0x50
 8001746:	d032      	beq.n	80017ae <HAL_CAN_RxCpltCallback+0x72>
 8001748:	d812      	bhi.n	8001770 <HAL_CAN_RxCpltCallback+0x34>
 800174a:	2b15      	cmp	r3, #21
 800174c:	d027      	beq.n	800179e <HAL_CAN_RxCpltCallback+0x62>
 800174e:	d807      	bhi.n	8001760 <HAL_CAN_RxCpltCallback+0x24>
 8001750:	2b10      	cmp	r3, #16
 8001752:	d020      	beq.n	8001796 <HAL_CAN_RxCpltCallback+0x5a>
#endif

        default:
            break;
    }
    HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 8001754:	4620      	mov	r0, r4
 8001756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 800175a:	2100      	movs	r1, #0
 800175c:	f7fe be81 	b.w	8000462 <HAL_CAN_Receive_IT>
    switch (hcan->pRxMsg->StdId)
 8001760:	2b20      	cmp	r3, #32
 8001762:	d020      	beq.n	80017a6 <HAL_CAN_RxCpltCallback+0x6a>
 8001764:	2b25      	cmp	r3, #37	; 0x25
 8001766:	d1f5      	bne.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_FU_Values_1_Data(hcan, &FU_Values_1_Data);
 8001768:	4919      	ldr	r1, [pc, #100]	; (80017d0 <HAL_CAN_RxCpltCallback+0x94>)
 800176a:	f7ff ff33 	bl	80015d4 <Rx_FU_Values_1_Data>
            break;
 800176e:	e7f1      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
    switch (hcan->pRxMsg->StdId)
 8001770:	2b80      	cmp	r3, #128	; 0x80
 8001772:	d024      	beq.n	80017be <HAL_CAN_RxCpltCallback+0x82>
 8001774:	d807      	bhi.n	8001786 <HAL_CAN_RxCpltCallback+0x4a>
 8001776:	2b60      	cmp	r3, #96	; 0x60
 8001778:	d01d      	beq.n	80017b6 <HAL_CAN_RxCpltCallback+0x7a>
 800177a:	2b70      	cmp	r3, #112	; 0x70
 800177c:	d1ea      	bne.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_FU_Values_2_Data(hcan, &FU_Values_2_Data);
 800177e:	4915      	ldr	r1, [pc, #84]	; (80017d4 <HAL_CAN_RxCpltCallback+0x98>)
 8001780:	f7ff ff5c 	bl	800163c <Rx_FU_Values_2_Data>
            break;
 8001784:	e7e6      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
    switch (hcan->pRxMsg->StdId)
 8001786:	2b90      	cmp	r3, #144	; 0x90
 8001788:	d01d      	beq.n	80017c6 <HAL_CAN_RxCpltCallback+0x8a>
 800178a:	2b95      	cmp	r3, #149	; 0x95
 800178c:	d1e2      	bne.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_BMS_Temps_Data(hcan, &BMS_Temps_Data);
 800178e:	4912      	ldr	r1, [pc, #72]	; (80017d8 <HAL_CAN_RxCpltCallback+0x9c>)
 8001790:	f7ff ffba 	bl	8001708 <Rx_BMS_Temps_Data>
            break;
 8001794:	e7de      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_BBOX_power_Data(hcan, &BBOX_power_Data);
 8001796:	4911      	ldr	r1, [pc, #68]	; (80017dc <HAL_CAN_RxCpltCallback+0xa0>)
 8001798:	f7ff fec7 	bl	800152a <Rx_BBOX_power_Data>
            break;
 800179c:	e7da      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_wheel_RPM_Data(hcan, &wheel_RPM_Data);
 800179e:	4910      	ldr	r1, [pc, #64]	; (80017e0 <HAL_CAN_RxCpltCallback+0xa4>)
 80017a0:	f7ff fed4 	bl	800154c <Rx_wheel_RPM_Data>
            break;
 80017a4:	e7d6      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_BBOX_status_Data(hcan, &BBOX_status_Data);
 80017a6:	490f      	ldr	r1, [pc, #60]	; (80017e4 <HAL_CAN_RxCpltCallback+0xa8>)
 80017a8:	f7ff fee6 	bl	8001578 <Rx_BBOX_status_Data>
            break;
 80017ac:	e7d2      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_BMS_State_Data(hcan, &BMS_State_Data);
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <HAL_CAN_RxCpltCallback+0xac>)
 80017b0:	f7ff ff1f 	bl	80015f2 <Rx_BMS_State_Data>
            break;
 80017b4:	e7ce      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_ECU_State_Data(hcan, &ECU_State_Data);
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <HAL_CAN_RxCpltCallback+0xb0>)
 80017b8:	f7ff ff2e 	bl	8001618 <Rx_ECU_State_Data>
            break;
 80017bc:	e7ca      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_Interconnect_Data(hcan, &Interconnect_Data);
 80017be:	490c      	ldr	r1, [pc, #48]	; (80017f0 <HAL_CAN_RxCpltCallback+0xb4>)
 80017c0:	f7ff ff60 	bl	8001684 <Rx_Interconnect_Data>
            break;
 80017c4:	e7c6      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
            Rx_BMS_Voltages_Data(hcan, &BMS_Voltages_Data);
 80017c6:	490b      	ldr	r1, [pc, #44]	; (80017f4 <HAL_CAN_RxCpltCallback+0xb8>)
 80017c8:	f7ff ff8c 	bl	80016e4 <Rx_BMS_Voltages_Data>
            break;
 80017cc:	e7c2      	b.n	8001754 <HAL_CAN_RxCpltCallback+0x18>
 80017ce:	bf00      	nop
 80017d0:	2000005a 	.word	0x2000005a
 80017d4:	20000060 	.word	0x20000060
 80017d8:	20000042 	.word	0x20000042
 80017dc:	20000024 	.word	0x20000024
 80017e0:	2000007a 	.word	0x2000007a
 80017e4:	2000002a 	.word	0x2000002a
 80017e8:	20000038 	.word	0x20000038
 80017ec:	20000052 	.word	0x20000052
 80017f0:	2000006c 	.word	0x2000006c
 80017f4:	2000004a 	.word	0x2000004a

080017f8 <initCanFilter>:
//extern LV_DATA_TypeDef LV_Data;
//extern LV_ERROR_TypeDef LV_Error;

void initCanFilter(void)
{
    sFilterConfig.FilterNumber = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	4907      	ldr	r1, [pc, #28]	; (8001818 <initCanFilter+0x20>)
    sFilterConfig.FilterMaskIdLow = 0x0000;
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
        sFilterConfig.BankNumber = 0;
        sFilterConfig.FilterActivation = ENABLE;

        HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <initCanFilter+0x24>)
    sFilterConfig.FilterNumber = 0;
 80017fe:	614b      	str	r3, [r1, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001800:	618b      	str	r3, [r1, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001802:	61cb      	str	r3, [r1, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8001804:	600b      	str	r3, [r1, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8001806:	604b      	str	r3, [r1, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001808:	608b      	str	r3, [r1, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800180a:	60cb      	str	r3, [r1, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800180c:	610b      	str	r3, [r1, #16]
        sFilterConfig.BankNumber = 0;
 800180e:	624b      	str	r3, [r1, #36]	; 0x24
        sFilterConfig.FilterActivation = ENABLE;
 8001810:	2301      	movs	r3, #1
 8001812:	620b      	str	r3, [r1, #32]
        HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001814:	f7fe bd45 	b.w	80002a2 <HAL_CAN_ConfigFilter>
 8001818:	200000c4 	.word	0x200000c4
 800181c:	200001a0 	.word	0x200001a0

08001820 <SystemClock_Config>:

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001820:	2310      	movs	r3, #16
{
 8001822:	b530      	push	{r4, r5, lr}
 8001824:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001826:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001828:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800182a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800182c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001830:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001832:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001834:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001836:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001838:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800183c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800183e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001840:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001842:	f7ff f8c1 	bl	80009c8 <HAL_RCC_OscConfig>
 8001846:	b100      	cbz	r0, 800184a <SystemClock_Config+0x2a>
 8001848:	e7fe      	b.n	8001848 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001850:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001852:	4621      	mov	r1, r4
 8001854:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800185a:	f7ff fc27 	bl	80010ac <HAL_RCC_ClockConfig>
 800185e:	4605      	mov	r5, r0
 8001860:	b100      	cbz	r0, 8001864 <SystemClock_Config+0x44>
 8001862:	e7fe      	b.n	8001862 <SystemClock_Config+0x42>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001864:	f7ff fcd6 	bl	8001214 <HAL_RCC_GetHCLKFreq>
 8001868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001870:	f7fe ff98 	bl	80007a4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001874:	2004      	movs	r0, #4
 8001876:	f7fe ffab 	bl	80007d0 <HAL_SYSTICK_CLKSourceConfig>
 800187a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800187e:	fa93 f3a3 	rbit	r3, r3

    /**Configure the Systick interrupt time 
    */
  __HAL_RCC_PLLI2S_ENABLE();
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800188c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001890:	601c      	str	r4, [r3, #0]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001892:	462a      	mov	r2, r5
 8001894:	4629      	mov	r1, r5
 8001896:	f04f 30ff 	mov.w	r0, #4294967295
 800189a:	f7fe ff43 	bl	8000724 <HAL_NVIC_SetPriority>
}
 800189e:	b015      	add	sp, #84	; 0x54
 80018a0:	bd30      	pop	{r4, r5, pc}
	...

080018a4 <main>:
{
 80018a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a8:	b086      	sub	sp, #24
  HAL_Init();
 80018aa:	f7fe fccd 	bl	8000248 <HAL_Init>
  SystemClock_Config();
 80018ae:	f7ff ffb7 	bl	8001820 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	4b93      	ldr	r3, [pc, #588]	; (8001b00 <main+0x25c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80018b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80018ba:	4892      	ldr	r0, [pc, #584]	; (8001b04 <main+0x260>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	f042 0208 	orr.w	r2, r2, #8
 80018c0:	619a      	str	r2, [r3, #24]
 80018c2:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	f002 0208 	and.w	r2, r2, #8
 80018ca:	9200      	str	r2, [sp, #0]
 80018cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	699a      	ldr	r2, [r3, #24]
  hcan1.Init.Prescaler = 9;
 80018d0:	2509      	movs	r5, #9
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	f042 0204 	orr.w	r2, r2, #4
 80018d6:	619a      	str	r2, [r3, #24]
 80018d8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80018e4:	f7ff f866 	bl	80009b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018ec:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	4884      	ldr	r0, [pc, #528]	; (8001b04 <main+0x260>)
 80018f2:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f7fe ff7c 	bl	80007f4 <HAL_GPIO_Init>
  hcan1.Init.BS1 = CAN_BS1_2TQ;
 80018fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hcan1.Instance = CAN1;
 8001900:	4c81      	ldr	r4, [pc, #516]	; (8001b08 <main+0x264>)
  hcan1.Init.Prescaler = 9;
 8001902:	4b82      	ldr	r3, [pc, #520]	; (8001b0c <main+0x268>)
  hcan1.Init.BS1 = CAN_BS1_2TQ;
 8001904:	6122      	str	r2, [r4, #16]
  hcan1.Init.Prescaler = 9;
 8001906:	e884 0028 	stmia.w	r4, {r3, r5}
  hcan1.Init.BS2 = CAN_BS2_5TQ;
 800190a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800190e:	2300      	movs	r3, #0
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001910:	4620      	mov	r0, r4
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001912:	60a3      	str	r3, [r4, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8001914:	60e3      	str	r3, [r4, #12]
  hcan1.Init.BS2 = CAN_BS2_5TQ;
 8001916:	6162      	str	r2, [r4, #20]
  hcan1.Init.TTCM = DISABLE;
 8001918:	61a3      	str	r3, [r4, #24]
  hcan1.Init.ABOM = DISABLE;
 800191a:	61e3      	str	r3, [r4, #28]
  hcan1.Init.AWUM = DISABLE;
 800191c:	6223      	str	r3, [r4, #32]
  hcan1.Init.NART = DISABLE;
 800191e:	6263      	str	r3, [r4, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8001920:	62a3      	str	r3, [r4, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8001922:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001924:	f7fe fd20 	bl	8000368 <HAL_CAN_Init>
 8001928:	b100      	cbz	r0, 800192c <main+0x88>
 800192a:	e7fe      	b.n	800192a <main+0x86>
  huart1.Init.BaudRate = 9600;
 800192c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8001930:	4d77      	ldr	r5, [pc, #476]	; (8001b10 <main+0x26c>)
  huart1.Init.BaudRate = 9600;
 8001932:	4a78      	ldr	r2, [pc, #480]	; (8001b14 <main+0x270>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001934:	60a8      	str	r0, [r5, #8]
  huart1.Init.BaudRate = 9600;
 8001936:	e885 000c 	stmia.w	r5, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800193a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800193c:	60e8      	str	r0, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800193e:	6128      	str	r0, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001940:	61a8      	str	r0, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001942:	61e8      	str	r0, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001944:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001946:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001948:	f7ff fd68 	bl	800141c <HAL_UART_Init>
 800194c:	4606      	mov	r6, r0
 800194e:	b100      	cbz	r0, 8001952 <main+0xae>
 8001950:	e7fe      	b.n	8001950 <main+0xac>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8001952:	463a      	mov	r2, r7
 8001954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001958:	486a      	ldr	r0, [pc, #424]	; (8001b04 <main+0x260>)
 800195a:	f7ff f82b 	bl	80009b4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800195e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001962:	f7fe fc91 	bl	8000288 <HAL_Delay>
        initCanFilter();
 8001966:	f7ff ff47 	bl	80017f8 <initCanFilter>
        hcan1.pTxMsg = &CanTxMsg;
 800196a:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <main+0x274>)
        HAL_CAN_Receive_IT(&hcan1, CAN_FIFO0);
 800196c:	4620      	mov	r0, r4
        hcan1.pTxMsg = &CanTxMsg;
 800196e:	6323      	str	r3, [r4, #48]	; 0x30
        hcan1.pRxMsg = &CanRxMsg;
 8001970:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <main+0x278>)
        HAL_CAN_Receive_IT(&hcan1, CAN_FIFO0);
 8001972:	4631      	mov	r1, r6
        hcan1.pRxMsg = &CanRxMsg;
 8001974:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_CAN_Receive_IT(&hcan1, CAN_FIFO0);
 8001976:	f7fe fd74 	bl	8000462 <HAL_CAN_Receive_IT>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 800197a:	4f62      	ldr	r7, [pc, #392]	; (8001b04 <main+0x260>)
}

/* USER CODE BEGIN 4 */
static void tel_send_FU1(void)
{
	RfTxBuffer[0]=FU_Values_1_Data.apps1;
 800197c:	4c68      	ldr	r4, [pc, #416]	; (8001b20 <main+0x27c>)
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 800197e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001982:	4638      	mov	r0, r7
 8001984:	f7ff f81b 	bl	80009be <HAL_GPIO_TogglePin>
 8001988:	f04f 0805 	mov.w	r8, #5
	 	  HAL_Delay(200);
 800198c:	20c8      	movs	r0, #200	; 0xc8
 800198e:	f7fe fc7b 	bl	8000288 <HAL_Delay>
	RfTxBuffer[0]=FU_Values_1_Data.apps1;
 8001992:	4b64      	ldr	r3, [pc, #400]	; (8001b24 <main+0x280>)

	//RfTxBuffer[6]=FU_Values_2_Data.steer;
	RfTxBuffer[6]=FU_Values_2_Data.brake_pos;

	RfTxBuffer[7]='f';
	RfTxBuffer[8]=255;
 8001994:	26ff      	movs	r6, #255	; 0xff
	RfTxBuffer[0]=FU_Values_1_Data.apps1;
 8001996:	781a      	ldrb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 8001998:	4961      	ldr	r1, [pc, #388]	; (8001b20 <main+0x27c>)
	RfTxBuffer[0]=FU_Values_1_Data.apps1;
 800199a:	7022      	strb	r2, [r4, #0]
	RfTxBuffer[1]=FU_Values_1_Data.apps2;
 800199c:	785a      	ldrb	r2, [r3, #1]
    HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 800199e:	4628      	mov	r0, r5
	RfTxBuffer[1]=FU_Values_1_Data.apps2;
 80019a0:	7062      	strb	r2, [r4, #1]
	RfTxBuffer[2]=FU_Values_1_Data.brake1;
 80019a2:	789a      	ldrb	r2, [r3, #2]
	RfTxBuffer[8]=255;
 80019a4:	7226      	strb	r6, [r4, #8]
	RfTxBuffer[2]=FU_Values_1_Data.brake1;
 80019a6:	70a2      	strb	r2, [r4, #2]
	RfTxBuffer[3]=FU_Values_1_Data.brake2;
 80019a8:	78da      	ldrb	r2, [r3, #3]
	RfTxBuffer[4]=FU_Values_1_Data.error / 256;
 80019aa:	889b      	ldrh	r3, [r3, #4]
	RfTxBuffer[3]=FU_Values_1_Data.brake2;
 80019ac:	70e2      	strb	r2, [r4, #3]
	RfTxBuffer[5]=FU_Values_1_Data.error % 256;
 80019ae:	7163      	strb	r3, [r4, #5]
	RfTxBuffer[4]=FU_Values_1_Data.error / 256;
 80019b0:	0a1a      	lsrs	r2, r3, #8
	RfTxBuffer[6]=FU_Values_2_Data.brake_pos;
 80019b2:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <main+0x284>)
	RfTxBuffer[4]=FU_Values_1_Data.error / 256;
 80019b4:	7122      	strb	r2, [r4, #4]
	RfTxBuffer[6]=FU_Values_2_Data.brake_pos;
 80019b6:	799b      	ldrb	r3, [r3, #6]
    HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 80019b8:	2209      	movs	r2, #9
	RfTxBuffer[6]=FU_Values_2_Data.brake_pos;
 80019ba:	71a3      	strb	r3, [r4, #6]
	RfTxBuffer[7]='f';
 80019bc:	2366      	movs	r3, #102	; 0x66
 80019be:	71e3      	strb	r3, [r4, #7]
    HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 80019c0:	2303      	movs	r3, #3
 80019c2:	f7ff fd57 	bl	8001474 <HAL_UART_Transmit>
}
static void tel_send_bms(void)
{
	RfTxBuffer[0]=BMS_State_Data.BMS_Faults/256;
 80019c6:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <main+0x288>)

	RfTxBuffer[6]=BMS_State_Data.CellVolt_L;
	RfTxBuffer[7]='b';

	RfTxBuffer[8]=255;
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 80019c8:	4628      	mov	r0, r5
	RfTxBuffer[0]=BMS_State_Data.BMS_Faults/256;
 80019ca:	885a      	ldrh	r2, [r3, #2]
	RfTxBuffer[8]=255;
 80019cc:	7226      	strb	r6, [r4, #8]
	RfTxBuffer[0]=BMS_State_Data.BMS_Faults/256;
 80019ce:	0a11      	lsrs	r1, r2, #8
	RfTxBuffer[1]=BMS_State_Data.BMS_Faults%256;
 80019d0:	7062      	strb	r2, [r4, #1]
	RfTxBuffer[2]=BMS_State_Data.BMS_Mode;
 80019d2:	781a      	ldrb	r2, [r3, #0]
	RfTxBuffer[0]=BMS_State_Data.BMS_Faults/256;
 80019d4:	7021      	strb	r1, [r4, #0]
	RfTxBuffer[2]=BMS_State_Data.BMS_Mode;
 80019d6:	70a2      	strb	r2, [r4, #2]
	RfTxBuffer[3]=BMS_State_Data.CellTemp_H;
 80019d8:	79da      	ldrb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 80019da:	4951      	ldr	r1, [pc, #324]	; (8001b20 <main+0x27c>)
	RfTxBuffer[3]=BMS_State_Data.CellTemp_H;
 80019dc:	70e2      	strb	r2, [r4, #3]
	RfTxBuffer[4]=BMS_State_Data.CellTemp_L;
 80019de:	799a      	ldrb	r2, [r3, #6]
 80019e0:	7122      	strb	r2, [r4, #4]
	RfTxBuffer[5]=BMS_State_Data.CellVolt_H;
 80019e2:	795a      	ldrb	r2, [r3, #5]
	RfTxBuffer[6]=BMS_State_Data.CellVolt_L;
 80019e4:	791b      	ldrb	r3, [r3, #4]
	RfTxBuffer[5]=BMS_State_Data.CellVolt_H;
 80019e6:	7162      	strb	r2, [r4, #5]
	RfTxBuffer[6]=BMS_State_Data.CellVolt_L;
 80019e8:	71a3      	strb	r3, [r4, #6]
	RfTxBuffer[7]='b';
 80019ea:	2362      	movs	r3, #98	; 0x62
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 80019ec:	2209      	movs	r2, #9
	RfTxBuffer[7]='b';
 80019ee:	71e3      	strb	r3, [r4, #7]
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 80019f0:	2303      	movs	r3, #3
 80019f2:	f7ff fd3f 	bl	8001474 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1,"b",1,1);
}
static void tel_send_BBoxPower(void)
{
	RfTxBuffer[0]=BBOX_power_Data.current/256;
 80019f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fa:	494d      	ldr	r1, [pc, #308]	; (8001b30 <main+0x28c>)
	RfTxBuffer[1]=BBOX_power_Data.current%265;
 80019fc:	f240 1e09 	movw	lr, #265	; 0x109
	RfTxBuffer[0]=BBOX_power_Data.current/256;
 8001a00:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
	RfTxBuffer[5]=BBOX_power_Data.voltage%256;

	RfTxBuffer[6]=BBOX_status_Data.AIR_N*128 + BBOX_status_Data.AIR_P*64 + BBOX_status_Data.BMS_OK*32 + BBOX_status_Data.FANS*16 + BBOX_status_Data.IMD_OK*8 + BBOX_status_Data.POLARITY*4 + BBOX_status_Data.SHD_EN*2+ BBOX_status_Data.SHD_RESET;
	RfTxBuffer[7]='p';

	RfTxBuffer[8]=255;
 8001a04:	7226      	strb	r6, [r4, #8]
	RfTxBuffer[0]=BBOX_power_Data.current/256;
 8001a06:	fb90 f3f2 	sdiv	r3, r0, r2
 8001a0a:	7023      	strb	r3, [r4, #0]
	RfTxBuffer[1]=BBOX_power_Data.current%265;
 8001a0c:	fb90 f3fe 	sdiv	r3, r0, lr
 8001a10:	fb0e 0313 	mls	r3, lr, r3, r0
 8001a14:	7063      	strb	r3, [r4, #1]
	RfTxBuffer[2]=BBOX_power_Data.power/256;
 8001a16:	f9b1 3000 	ldrsh.w	r3, [r1]
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 8001a1a:	4628      	mov	r0, r5
	RfTxBuffer[2]=BBOX_power_Data.power/256;
 8001a1c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001a20:	70a2      	strb	r2, [r4, #2]
	RfTxBuffer[3]=BBOX_power_Data.power%256;
 8001a22:	425a      	negs	r2, r3
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	bf58      	it	pl
 8001a2a:	4253      	negpl	r3, r2
 8001a2c:	70e3      	strb	r3, [r4, #3]
	RfTxBuffer[4]=BBOX_power_Data.voltage/256;
 8001a2e:	888b      	ldrh	r3, [r1, #4]
 8001a30:	0a1a      	lsrs	r2, r3, #8
	RfTxBuffer[5]=BBOX_power_Data.voltage%256;
 8001a32:	7163      	strb	r3, [r4, #5]
	RfTxBuffer[6]=BBOX_status_Data.AIR_N*128 + BBOX_status_Data.AIR_P*64 + BBOX_status_Data.BMS_OK*32 + BBOX_status_Data.FANS*16 + BBOX_status_Data.IMD_OK*8 + BBOX_status_Data.POLARITY*4 + BBOX_status_Data.SHD_EN*2+ BBOX_status_Data.SHD_RESET;
 8001a34:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <main+0x290>)
	RfTxBuffer[4]=BBOX_power_Data.voltage/256;
 8001a36:	7122      	strb	r2, [r4, #4]
	RfTxBuffer[6]=BBOX_status_Data.AIR_N*128 + BBOX_status_Data.AIR_P*64 + BBOX_status_Data.BMS_OK*32 + BBOX_status_Data.FANS*16 + BBOX_status_Data.IMD_OK*8 + BBOX_status_Data.POLARITY*4 + BBOX_status_Data.SHD_EN*2+ BBOX_status_Data.SHD_RESET;
 8001a38:	78d9      	ldrb	r1, [r3, #3]
 8001a3a:	791a      	ldrb	r2, [r3, #4]
 8001a3c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8001a40:	79da      	ldrb	r2, [r3, #7]
 8001a42:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001a46:	7b19      	ldrb	r1, [r3, #12]
 8001a48:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8001a4c:	7999      	ldrb	r1, [r3, #6]
 8001a4e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8001a52:	7ada      	ldrb	r2, [r3, #11]
 8001a54:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8001a58:	7a9a      	ldrb	r2, [r3, #10]
 8001a5a:	7a5b      	ldrb	r3, [r3, #9]
 8001a5c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001a60:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001a64:	71a3      	strb	r3, [r4, #6]
	RfTxBuffer[7]='p';
 8001a66:	2370      	movs	r3, #112	; 0x70
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 8001a68:	2209      	movs	r2, #9
	RfTxBuffer[7]='p';
 8001a6a:	71e3      	strb	r3, [r4, #7]
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 8001a6c:	492c      	ldr	r1, [pc, #176]	; (8001b20 <main+0x27c>)
 8001a6e:	2303      	movs	r3, #3
 8001a70:	f7ff fd00 	bl	8001474 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1,"p",1,1);
}

static void tel_send_ECU(void)
{
    RfTxBuffer[0]=ECU_State_Data.ECU_Status;
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <main+0x294>)
	RfTxBuffer[5]=ECU_State_Data.TempInverter_H;
	RfTxBuffer[6]=ECU_State_Data.TempMotor_H;

	RfTxBuffer[7]='e';
	RfTxBuffer[8]=255;
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 8001a76:	492a      	ldr	r1, [pc, #168]	; (8001b20 <main+0x27c>)
    RfTxBuffer[0]=ECU_State_Data.ECU_Status;
 8001a78:	781a      	ldrb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 8001a7a:	4628      	mov	r0, r5
    RfTxBuffer[0]=ECU_State_Data.ECU_Status;
 8001a7c:	7022      	strb	r2, [r4, #0]
	RfTxBuffer[1]=ECU_State_Data.FL_AMK_Status;
 8001a7e:	785a      	ldrb	r2, [r3, #1]
	RfTxBuffer[8]=255;
 8001a80:	7226      	strb	r6, [r4, #8]
	RfTxBuffer[1]=ECU_State_Data.FL_AMK_Status;
 8001a82:	7062      	strb	r2, [r4, #1]
	RfTxBuffer[2]=ECU_State_Data.FR_AMK_Status;
 8001a84:	789a      	ldrb	r2, [r3, #2]
 8001a86:	70a2      	strb	r2, [r4, #2]
	RfTxBuffer[3]=ECU_State_Data.RL_AMK_Status;
 8001a88:	78da      	ldrb	r2, [r3, #3]
 8001a8a:	70e2      	strb	r2, [r4, #3]
	RfTxBuffer[4]=ECU_State_Data.RR_AMK_Status;
 8001a8c:	791a      	ldrb	r2, [r3, #4]
 8001a8e:	7122      	strb	r2, [r4, #4]
	RfTxBuffer[5]=ECU_State_Data.TempInverter_H;
 8001a90:	799a      	ldrb	r2, [r3, #6]
	RfTxBuffer[6]=ECU_State_Data.TempMotor_H;
 8001a92:	795b      	ldrb	r3, [r3, #5]
	RfTxBuffer[5]=ECU_State_Data.TempInverter_H;
 8001a94:	7162      	strb	r2, [r4, #5]
	RfTxBuffer[6]=ECU_State_Data.TempMotor_H;
 8001a96:	71a3      	strb	r3, [r4, #6]
	RfTxBuffer[7]='e';
 8001a98:	2365      	movs	r3, #101	; 0x65
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 8001a9a:	2209      	movs	r2, #9
	RfTxBuffer[7]='e';
 8001a9c:	71e3      	strb	r3, [r4, #7]
	HAL_UART_Transmit(&huart1,RfTxBuffer,9,3);
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	f7ff fce8 	bl	8001474 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1,"e",1,1);
}
static void tel_send_INTERKONEKT(void)
{
    RfTxBuffer[0]=Interconnect_Data.car_state;
 8001aa4:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <main+0x298>)
	RfTxBuffer[3]=Interconnect_Data.susp_RL%256;
	RfTxBuffer[4]=Interconnect_Data.susp_RR/256;
	RfTxBuffer[5]=Interconnect_Data.susp_RR%256;
	RfTxBuffer[6]='i';
	RfTxBuffer[7]=255;
	HAL_UART_Transmit(&huart1,RfTxBuffer,8,3);
 8001aa6:	4628      	mov	r0, r5
    RfTxBuffer[0]=Interconnect_Data.car_state;
 8001aa8:	781a      	ldrb	r2, [r3, #0]
	RfTxBuffer[1]=Interconnect_Data.tsas*128 + Interconnect_Data.right_w_pump*64 + Interconnect_Data.left_w_pump*32 + Interconnect_Data.killswitch_R*16 + Interconnect_Data.killswitch_L*8 + Interconnect_Data.brake_red*4 + Interconnect_Data.brake_white*2 ;
 8001aaa:	7959      	ldrb	r1, [r3, #5]
    RfTxBuffer[0]=Interconnect_Data.car_state;
 8001aac:	7022      	strb	r2, [r4, #0]
	RfTxBuffer[1]=Interconnect_Data.tsas*128 + Interconnect_Data.right_w_pump*64 + Interconnect_Data.left_w_pump*32 + Interconnect_Data.killswitch_R*16 + Interconnect_Data.killswitch_L*8 + Interconnect_Data.brake_red*4 + Interconnect_Data.brake_white*2 ;
 8001aae:	789a      	ldrb	r2, [r3, #2]
	RfTxBuffer[7]=255;
 8001ab0:	71e6      	strb	r6, [r4, #7]
	RfTxBuffer[1]=Interconnect_Data.tsas*128 + Interconnect_Data.right_w_pump*64 + Interconnect_Data.left_w_pump*32 + Interconnect_Data.killswitch_R*16 + Interconnect_Data.killswitch_L*8 + Interconnect_Data.brake_red*4 + Interconnect_Data.brake_white*2 ;
 8001ab2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8001ab6:	785a      	ldrb	r2, [r3, #1]
 8001ab8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001abc:	7999      	ldrb	r1, [r3, #6]
 8001abe:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8001ac2:	79d9      	ldrb	r1, [r3, #7]
 8001ac4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8001ac8:	78da      	ldrb	r2, [r3, #3]
 8001aca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8001ace:	791a      	ldrb	r2, [r3, #4]
 8001ad0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001ad4:	0052      	lsls	r2, r2, #1
 8001ad6:	7062      	strb	r2, [r4, #1]
	RfTxBuffer[2]=Interconnect_Data.susp_RL/256;
 8001ad8:	899a      	ldrh	r2, [r3, #12]
	RfTxBuffer[4]=Interconnect_Data.susp_RR/256;
 8001ada:	895b      	ldrh	r3, [r3, #10]
	RfTxBuffer[2]=Interconnect_Data.susp_RL/256;
 8001adc:	0a11      	lsrs	r1, r2, #8
	RfTxBuffer[3]=Interconnect_Data.susp_RL%256;
 8001ade:	70e2      	strb	r2, [r4, #3]
	RfTxBuffer[5]=Interconnect_Data.susp_RR%256;
 8001ae0:	7163      	strb	r3, [r4, #5]
	RfTxBuffer[4]=Interconnect_Data.susp_RR/256;
 8001ae2:	0a1a      	lsrs	r2, r3, #8
	RfTxBuffer[6]='i';
 8001ae4:	2369      	movs	r3, #105	; 0x69
	RfTxBuffer[2]=Interconnect_Data.susp_RL/256;
 8001ae6:	70a1      	strb	r1, [r4, #2]
	RfTxBuffer[4]=Interconnect_Data.susp_RR/256;
 8001ae8:	7122      	strb	r2, [r4, #4]
	RfTxBuffer[6]='i';
 8001aea:	71a3      	strb	r3, [r4, #6]
	HAL_UART_Transmit(&huart1,RfTxBuffer,8,3);
 8001aec:	2208      	movs	r2, #8
 8001aee:	2303      	movs	r3, #3
 8001af0:	490b      	ldr	r1, [pc, #44]	; (8001b20 <main+0x27c>)
 8001af2:	f7ff fcbf 	bl	8001474 <HAL_UART_Transmit>
	 	  for (i=0;i<5;i++)
 8001af6:	f1b8 0801 	subs.w	r8, r8, #1
 8001afa:	f47f af47 	bne.w	800198c <main+0xe8>
 8001afe:	e73e      	b.n	800197e <main+0xda>
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	200001a0 	.word	0x200001a0
 8001b0c:	40006400 	.word	0x40006400
 8001b10:	200000f0 	.word	0x200000f0
 8001b14:	40013800 	.word	0x40013800
 8001b18:	200000a8 	.word	0x200000a8
 8001b1c:	20000084 	.word	0x20000084
 8001b20:	20000194 	.word	0x20000194
 8001b24:	2000005a 	.word	0x2000005a
 8001b28:	20000060 	.word	0x20000060
 8001b2c:	20000038 	.word	0x20000038
 8001b30:	20000024 	.word	0x20000024
 8001b34:	2000002a 	.word	0x2000002a
 8001b38:	20000052 	.word	0x20000052
 8001b3c:	2000006c 	.word	0x2000006c

08001b40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_MspInit+0x84>)
{
 8001b42:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b44:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b46:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b48:	f042 0201 	orr.w	r2, r2, #1
 8001b4c:	619a      	str	r2, [r3, #24]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	f7fe fdd2 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f06f 000b 	mvn.w	r0, #11
 8001b62:	4611      	mov	r1, r2
 8001b64:	f7fe fdde 	bl	8000724 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f06f 000a 	mvn.w	r0, #10
 8001b6e:	4611      	mov	r1, r2
 8001b70:	f7fe fdd8 	bl	8000724 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f06f 0009 	mvn.w	r0, #9
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	f7fe fdd2 	bl	8000724 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f06f 0004 	mvn.w	r0, #4
 8001b86:	4611      	mov	r1, r2
 8001b88:	f7fe fdcc 	bl	8000724 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f06f 0003 	mvn.w	r0, #3
 8001b92:	4611      	mov	r1, r2
 8001b94:	f7fe fdc6 	bl	8000724 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f06f 0001 	mvn.w	r0, #1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	f7fe fdc0 	bl	8000724 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8001baa:	4611      	mov	r1, r2
 8001bac:	f7fe fdba 	bl	8000724 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bb0:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_MspInit+0x88>)
 8001bb2:	6853      	ldr	r3, [r2, #4]
 8001bb4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	b003      	add	sp, #12
 8001bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000

08001bcc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bcc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8001bce:	6802      	ldr	r2, [r0, #0]
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_CAN_MspInit+0xa0>)
{
 8001bd2:	b086      	sub	sp, #24
  if(hcan->Instance==CAN1)
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d146      	bne.n	8001c66 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bd8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001bdc:	69da      	ldr	r2, [r3, #28]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2400      	movs	r4, #0
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001be0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001be4:	61da      	str	r2, [r3, #28]
 8001be6:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	481e      	ldr	r0, [pc, #120]	; (8001c70 <HAL_CAN_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bf8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f7fe fdf9 	bl	80007f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	a902      	add	r1, sp, #8
 8001c10:	4817      	ldr	r0, [pc, #92]	; (8001c70 <HAL_CAN_MspInit+0xa4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c12:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f7fe fdee 	bl	80007f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001c18:	4a16      	ldr	r2, [pc, #88]	; (8001c74 <HAL_CAN_MspInit+0xa8>)

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001c1a:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_CAN1_2();
 8001c1c:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001c1e:	2013      	movs	r0, #19
    __HAL_AFIO_REMAP_CAN1_2();
 8001c20:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	f7fe fd7a 	bl	8000724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001c30:	2013      	movs	r0, #19
 8001c32:	f7fe fdab 	bl	800078c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c36:	4622      	mov	r2, r4
 8001c38:	4621      	mov	r1, r4
 8001c3a:	2014      	movs	r0, #20
 8001c3c:	f7fe fd72 	bl	8000724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c40:	2014      	movs	r0, #20
 8001c42:	f7fe fda3 	bl	800078c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001c46:	4622      	mov	r2, r4
 8001c48:	4621      	mov	r1, r4
 8001c4a:	2015      	movs	r0, #21
 8001c4c:	f7fe fd6a 	bl	8000724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c50:	2015      	movs	r0, #21
 8001c52:	f7fe fd9b 	bl	800078c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001c56:	2016      	movs	r0, #22
 8001c58:	4622      	mov	r2, r4
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	f7fe fd62 	bl	8000724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001c60:	2016      	movs	r0, #22
 8001c62:	f7fe fd93 	bl	800078c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c66:	b006      	add	sp, #24
 8001c68:	bd10      	pop	{r4, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40006400 	.word	0x40006400
 8001c70:	40010c00 	.word	0x40010c00
 8001c74:	40010000 	.word	0x40010000

08001c78 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001c7a:	6802      	ldr	r2, [r0, #0]
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_UART_MspInit+0x50>)
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d11f      	bne.n	8001cc2 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c82:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c86:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c8e:	619a      	str	r2, [r3, #24]
 8001c90:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f7fe fda3 	bl	80007f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	a902      	add	r1, sp, #8
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f7fe fd99 	bl	80007f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cc2:	b007      	add	sp, #28
 8001cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <NMI_Handler>:
 8001cd0:	4770      	bx	lr

08001cd2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler>

08001cd4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler>

08001cd6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler>

08001cd8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler>

08001cda <SVC_Handler>:
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001ce0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce2:	f7fe fac3 	bl	800026c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001cea:	f7fe bd7e 	b.w	80007ea <HAL_SYSTICK_IRQHandler>
	...

08001cf0 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cf0:	4801      	ldr	r0, [pc, #4]	; (8001cf8 <CAN1_SCE_IRQHandler+0x8>)
 8001cf2:	f7fe bc53 	b.w	800059c <HAL_CAN_IRQHandler>
 8001cf6:	bf00      	nop
 8001cf8:	200001a0 	.word	0x200001a0

08001cfc <CAN1_RX1_IRQHandler>:
 8001cfc:	f7ff bff8 	b.w	8001cf0 <CAN1_SCE_IRQHandler>

08001d00 <CAN1_RX0_IRQHandler>:
 8001d00:	f7ff bff6 	b.w	8001cf0 <CAN1_SCE_IRQHandler>

08001d04 <CAN1_TX_IRQHandler>:
 8001d04:	f7ff bff4 	b.w	8001cf0 <CAN1_SCE_IRQHandler>

08001d08 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <SystemInit+0x4c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <SystemInit+0x50>)
 8001d16:	400a      	ands	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d24:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d2c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d34:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 8001d3e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001d42:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 8001d44:	2200      	movs	r2, #0
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <SystemInit+0x54>)
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	f0ff0000 	.word	0xf0ff0000
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d62:	e003      	b.n	8001d6c <LoopCopyDataInit>

08001d64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8001d66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d6a:	3104      	adds	r1, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8001d70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d74:	d3f6      	bcc.n	8001d64 <CopyDataInit>
  ldr r2, =_sbss
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8001d78:	e002      	b.n	8001d80 <LoopFillZerobss>

08001d7a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d7c:	f842 3b04 	str.w	r3, [r2], #4

08001d80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8001d82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d84:	d3f9      	bcc.n	8001d7a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d86:	f7ff ffbf 	bl	8001d08 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8001d8a:	f7ff fd8b 	bl	80018a4 <main>
  bx lr
 8001d8e:	4770      	bx	lr
  ldr r3, =_sidata
 8001d90:	08001dfc 	.word	0x08001dfc
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d98:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001d9c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001da0:	200001e0 	.word	0x200001e0

08001da4 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da4:	e7fe      	b.n	8001da4 <ADC1_2_IRQHandler>
	...

08001da8 <_init>:
 8001da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001daa:	bf00      	nop
 8001dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dae:	bc08      	pop	{r3}
 8001db0:	469e      	mov	lr, r3
 8001db2:	4770      	bx	lr

08001db4 <_fini>:
 8001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db6:	bf00      	nop
 8001db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dba:	bc08      	pop	{r3}
 8001dbc:	469e      	mov	lr, r3
 8001dbe:	4770      	bx	lr
